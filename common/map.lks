include('math');
include('utils');

function getCellsAround(centerCell) {
	if (centerCell === null) {
		return [];
	}

	var x = getCellX(centerCell);
	var y = getCellY(centerCell);
	var deltas = [
		[0, 1],
		[1, 1],
		[1, 0],
		[1, -1],
		[0, -1],
		[-1, -1],
		[-1, 0],
		[-1, 1]
	];

	var cells = arrayMap(deltas, function(delta) {
		return getCellFromXY(x + delta[0], y + delta[1]);
	});
	var emptyCells = arrayFilter(cells, function(cell) {
		return cell !== null && isEmptyCell(cell);
	});
	return removeUnreachableCells(emptyCells);
}

function getClosestCell(cells) {
	return getClosestCellTo(cells, getCell());
}

function getClosestCellTo(cells, refCell) {
	if (safeCount(cells) === 0) {
		return null;
	}

	var firstCell = shift(cells);
	var closestCellPathLength = getPathLength(refCell, firstCell);

	return arrayFoldLeft(cells, function(closestCell, cell) {
		var cellPathLength = getPathLength(refCell, cell);

		if (
			cellPathLength !== null &&
			cellPathLength < closestCellPathLength
		) {
			closestCellPathLength = cellPathLength;
			return cell;
		}
		return closestCell;
	}, firstCell);
}

function getDirectReachableCellsAround(cell) {
	return ensureArray(
		arrayFilter(getCellsAround(cell), function(cellAround) {
			return getPathLength(cell, cellAround) <= 1;
		})
	);
}

function getFarthestCellFrom(cells, refCell) {
	if (safeCount(cells) === 0) {
		return null;
	}

	var firstCell = shift(cells);
	var farestCellPathLength = getPathLength(refCell, firstCell);

	return arrayFoldLeft(cells, function(farestCell, cell) {
		var cellPathLength = getPathLength(refCell, cell);

		if (
			cellPathLength !== null &&
			cellPathLength > farestCellPathLength
		) {
			farestCellPathLength = cellPathLength;
			return cell;
		}
		return farestCell;
	}, firstCell);
}

function getMinPathCells(cells) {
	var startCell = getCell();
	var reachableCells = removeUnreachableCells(cells);
	var closestReachableCell = getClosestCell(reachableCells);
	var minPathLength = getPathLength(startCell, closestReachableCell);

	return ensureArray(
		arrayFilter(reachableCells, function(cell) {
			return getPathLength(startCell, cell) <= minPathLength;
		})
	);
}

function getReachableCells(startCell, availableMP) {
	var x = getCellX(startCell);
	var y = getCellY(startCell);
	var cells = [];

	for (var j = y - availableMP; j <= y + availableMP; j++) {
		for (var i = x - availableMP; i <= x + availableMP; i++) {
			push(cells, getCellFromXY(i, j));
		}
	}

	return removeUnreachableCellsWith(cells, startCell, availableMP);
}

function removeUnreachableCells(cells) {
	var currentCell = getCell();

	return ensureArray(
		arrayFilter(cells, function(cell) {
			return cell !== null &&
				isEmptyCell(cell) &&
				getPathLength(currentCell, cell) !== null;
		})
	);
}

function removeUnreachableCellsWith(cells, startCell, availableMP) {
	return ensureArray(
		arrayFilter(cells, function(cell) {
			if (cell === null || !isEmptyCell(cell)) {
				return false;
			}
			var pathLength = getPathLength(startCell, cell);
			return pathLength !== null &&
				pathLength <= availableMP;
		})
	);
}

function sortByDistanceAsc(cells, refCell) {
	cells = ensureArray(cells);
	return arraySort(cells, function(a, b) {
		var distA = getDistance(refCell, a);
		var distB = getDistance(refCell, b);
		return distA < distB ? -1 : (distA === distB ? 0 : 1);
	});
}

function sortByDistanceDesc(cells, refCell) {
	cells = ensureArray(cells);
	return arraySort(cells, function(a, b) {
		var distA = getDistance(refCell, a);
		var distB = getDistance(refCell, b);
		return distA > distB ? -1 : (distA === distB ? 0 : 1);
	});
}
