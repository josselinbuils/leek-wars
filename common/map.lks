include('math');
include('utils');

global BORDER_CELLS = computeBorderCells([
	// [startIndex, endIndex, delta]
	[0, 17, 1],
	[18, 34, 1],
	[52, 612, 35],
	[69, 594, 35],
	[595, 611, 1],
	[578, 593, 1],
	[35, 560, 35],
	[53, 543, 35]
]);

function computeBorderCells(ranges) {
	var cells = [];

	for (var range in ranges) {
		var start = range[0];
		var end = range[1];
		var delta = range[2];

		for (var cell = start; cell <= end; cell += delta) {
			push(cells, cell);
		}
	}

	return cells;
}

function getCellsAround(centerCell) {
	if (centerCell === null) {
		return [];
	}

	var x = getCellX(centerCell);
	var y = getCellY(centerCell);
	var deltas = [
		[0, 1],
		[1, 1],
		[1, 0],
		[1, -1],
		[0, -1],
		[-1, -1],
		[-1, 0],
		[-1, 1]
	];

	var cells = arrayMap(deltas, function(delta) {
		return getCellFromXY(x + delta[0], y + delta[1]);
	});
	var emptyCells = arrayFilter(cells, function(cell) {
		return cell !== null && isEmptyCell(cell);
	});
	return removeUnreachableCells(emptyCells, getCell());
}

function getClosestCell(cells) {
	return getClosestCellTo(cells, getCell());
}

function getClosestCellTo(cells, refCell) {
	if (safeCount(cells) === 0) {
		debugW('getClosestCellTo: no cell provided');
		return null;
	}

	var closestCell = null;
	var closestCellPathLength = 999;

	for (var cell in cells) {
		var cellPathLength = getPathLength(refCell, cell);

		if (
			cellPathLength !== null &&
			cellPathLength < closestCellPathLength
		) {
			closestCell = cell;
			closestCellPathLength = cellPathLength;
		}
	}

	if (closestCell === null) {
		debugW(
			'getClosestCellTo: unable to find a cell, cells: ' +
			cells + ', refCell: ' + refCell
		);
	}
	return closestCell;
}

function getDirectReachableCellsAround(cell) {
	return ensureArray(
		arrayFilter(getCellsAround(cell), function(cellAround) {
			return getPathLength(cell, cellAround) <= 1;
		})
	);
}

function getFarthestCellFrom(cells, refCell) {
	if (safeCount(cells) === 0) {
		debugW('getFarthestCellFrom: no cell provided');
		return null;
	}

	var farestCell = null;
	var farestCellPathLength = 999;

	for (var cell in cells) {
		var cellPathLength = getPathLength(refCell, cell);

		if (
			cellPathLength !== null &&
			cellPathLength < farestCellPathLength
		) {
			farestCell = cell;
			farestCellPathLength = cellPathLength;
		}
	}

	if (farestCell === null) {
		debugW(
			'getFarthestCellFrom: unable to find a cell, cells: ' +
			cells + ', refCell: ' + refCell
		);
	}
	return farestCell;
}

function getMinPathCells(cells) {
	var startCell = getCell();
	var reachableCells = removeUnreachableCells(cells, startCell);
	var closestReachableCell = getClosestCell(reachableCells);
	var minPathLength = getPathLength(startCell, closestReachableCell);

	return ensureArray(
		arrayFilter(reachableCells, function(cell) {
			return getPathLength(startCell, cell) <= minPathLength;
		})
	);
}

function getReachableCells(startCell, availableMP) {
	var x = getCellX(startCell);
	var y = getCellY(startCell);
	var cells = [startCell];

	for (var j = y - availableMP; j <= y + availableMP; j++) {
		for (var i = x - availableMP; i <= x + availableMP; i++) {
			push(cells, getCellFromXY(i, j));
		}
	}

	return removeUnreachableCellsWith(cells, startCell, availableMP);
}

function isBorderCell(cell) {
	return inArray(BORDER_CELLS, cell);
}

function removeUnreachableCells(cells, startCell) {
	var currentCell = getCell();

	return ensureArray(
		arrayFilter(cells, function(cell) {
			if (cell === null) {
				return false;
			}
			if (cell === startCell) {
				return true;
			}
			return isEmptyCell(cell) &&
				getPathLength(currentCell, cell) !== null;
		})
	);
}

function removeUnreachableCellsWith(cells, startCell, availableMP) {
	return ensureArray(
		arrayFilter(cells, function(cell) {
			if (cell === startCell) {
				return true;
			}
			if (cell === null || !isEmptyCell(cell)) {
				return false;
			}
			var pathLength = getPathLength(startCell, cell);
			return pathLength !== null &&
				pathLength <= availableMP;
		})
	);
}

function sortByDistanceAsc(cells, refCell) {
	return arraySort(ensureArray(cells), function(a, b) {
		var distA = getDistance(refCell, a);
		var distB = getDistance(refCell, b);
		return distA < distB ? -1 : (distA === distB ? 0 : 1);
	});
}

function sortByDistanceDesc(cells, refCell) {
	return arraySort(ensureArray(cells), function(a, b) {
		var distA = getDistance(refCell, a);
		var distB = getDistance(refCell, b);
		return distA > distB ? -1 : (distA === distB ? 0 : 1);
	});
}
