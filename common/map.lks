include('math');

function getCellsAround(centerCell) {
	var x = getCellX(centerCell);
	var y = getCellY(centerCell);
	var deltas = [
		[0, 1],
		[1, 1],
		[1, 0],
		[1, -1],
		[0, -1],
		[-1, -1],
		[-1, 0],
		[-1, 1]
	];

	var cells = arrayMap(deltas, function(delta) {
		return getCellFromXY(x + delta[0], y + delta[1]);
	});
	var emptyCells = arrayFilter(cells, function(cell) {
		return cell !== null && isEmptyCell(cell);
	});
	return removeUnreachableCells(emptyCells);
}

function getCloserCellsTo(cells, refCell) {
	var startCell = getCell();

	return arrayFilter(cells, function(cell) {
		return getPathLength(cell, refCell) < getPathLength(startCell, refCell);
	});
}

function getClosestCell(cells) {
	return getClosestCellTo(cells, getCell());
}

function getClosestCellTo(cells, refCell) {
	if (cells === null || count(cells) === 0) {
		return null;
	}
	return arrayFoldLeft(cells, function(closestCell, cell) {
		var cellPathLength = getPathLength(refCell, cell);
		var closestCellPathLength = getPathLength(refCell, closestCell);

		return (
			cellPathLength !== null &&
			cellPathLength < closestCellPathLength
		) ? cell : closestCell;
	}, shift(cells));
}

function getFarthestCellFrom(cells, refCell) {
	if (count(cells) === 0) {
		return null;
	}
	return arrayFoldLeft(cells, function(farestCell, cell) {
		var cellPathLength = getPathLength(refCell, cell);
		var farestCellPathLength = getPathLength(refCell, farestCell);

		return (
			cellPathLength !== null &&
			cellPathLength > farestCellPathLength
		) ? cell : farestCell;
	}, shift(cells));
}

function getReachableCells(startCell, availableMP) {
	var x = getCellX(startCell);
	var y = getCellY(startCell);
	var cells = [];

	for (var j = y - availableMP; j <= y + availableMP; j++) {
		for (var i = x - availableMP; i <= x + availableMP; i++) {
			push(cells, getCellFromXY(i, j));
		}
	}

	return removeUnreachableCellsWith(cells, startCell, availableMP);
}

function removeUnreachableCells(cells) {
	var currentCell = getCell();

	return arrayFilter(cells, function(cell) {
		return cell !== null &&
			isEmptyCell(cell) &&
			getPathLength(currentCell, cell) !== null;
	});
}

function removeUnreachableCellsWith(cells, startCell, availableMP) {
	return arrayFilter(cells, function(cell) {
		if (cell === null || !isEmptyCell(cell)) {
			return false;
		}
		var pathLength = getPathLength(startCell, cell);
		return pathLength !== null && pathLength <= availableMP;
	});
}