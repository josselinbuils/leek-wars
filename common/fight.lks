include('map');

global ENEMY_RANGE = 8;
global ESCAPE_MODE = 'ESCAPE';
global SNEAK_MODE = 'SNEAK';

function canFireWithChip(chip, target) {
	var canFire = getTP() >= getChipCost(chip) && getCooldown(chip) === 0;

	if (canFire && target !== getLeek()) {
		var cellToFire = getCellToFireWithChip(chip, target);
		var pathlength = getPathLength(getCell(), cellToFire);

		canFire = cellToFire !== null && getMP() >= pathlength;

		if (canFire && isEnemy(target)) {
			var enemyCell = getCell(target);
			var minDistance = getMinDistance(target);
			var theoricDistanceAfter = getDistance(enemyCell, cellToFire) + getMP() - pathlength;

			canFire = pathlength <= 1 || getDistance(enemyCell, cellToFire) >= getDistance(enemyCell, getCell()) || theoricDistanceAfter >= minDistance || ((chip === CHIP_TOXIN || chip === CHIP_VENOM) && !isPoisoned(target));
		}
	}

	debug('canFireWithChip(' + getChipName(chip) + ') => ' + canFire);
	return canFire;
}

function canFireWithWeapon(weapon, enemy) {
	var cost = getWeaponCost(weapon);
	var canFire = false;

	if (getWeapon() !== weapon) {
		cost = cost + 1;
	}

	if (getTP() >= cost) {
		var cellToFire = getCellToFireWithWeapon(weapon, enemy);
		var pathlength = getPathLength(getCell(), cellToFire);
		var enemyCell = getCell(enemy);
		var minDistance = getMinDistance(enemy);

		canFire = cellToFire !== null && getMP() >= pathlength && (pathlength <= 1 || getDistance(enemyCell, cellToFire) >= getDistance(enemyCell, getCell()) || (getDistance(enemyCell, cellToFire) + getMP() - pathlength) >= minDistance);
	}

	debug('canFireWithWeapon(' + getWeaponName(weapon) + ') => ' + canFire);
	return canFire;
}

function ensureWearingWeapon(weapon) {
	if (getWeapon() !== weapon) {
		setWeapon(weapon);
	}
}

function getCellToFireWithChip(chip, target) {
	var startCell = getCell();
	var cells = getCellsToUseChip(chip, target);
	var cellToFire = null;

	if (cells !== null) {
		var reachableCells = removeUnreachableCells(cells);
		var minPathLength = getPathLength(startCell, getClosestCell(reachableCells));
		var cellsWithMinPath = arrayFilter(reachableCells, function(cell) {
			return getPathLength(startCell, cell) <= minPathLength;
		});
		cellToFire = getFarthestCellFrom(cellsWithMinPath, getCell(target));
	}

	debug('getCellToFireWithChip(' + getChipName(chip) + ', ' + getName(target) + ')');
	debug(' ↳ startCell: ' + startCell);
	debug(' ↳ cellToFire: ' + cellToFire);
	debug(' ↳ pathLength: ' + getPathLength(startCell, cellToFire));

	return cellToFire;
}

function getCellToFireWithWeapon(weapon, enemy) {
	var startCell = getCell();
	var cells = getCellsToUseWeapon(weapon, enemy);
	var cellToFire = null;

	if (cells !== null) {
		var reachableCells = removeUnreachableCells(cells);
		var minPathLength = getPathLength(startCell, getClosestCell(reachableCells));
		var cellsWithMinPath = arrayFilter(reachableCells, function(cell) {
			return getPathLength(startCell, cell) <= minPathLength;
		});
		cellToFire = getFarthestCellFrom(cellsWithMinPath, getCell(enemy));
	}

	debug('getCellToFireWithWeapon(' + getWeaponName(weapon) + ')');
	debug(' ↳ startCell: ' + startCell);
	debug(' ↳ cellToFire: ' + cellToFire);
	debug(' ↳ pathLength: ' + getPathLength(startCell, cellToFire));

	return cellToFire;
}

function getMinDistance(enemy) {
	return getTotalMP(enemy) + ENEMY_RANGE + 1;
}

function getMinDistanceCells(cells, enemy) {
	var enemyCell = getCell(enemy);
	var minDistance = getMinDistance(enemy);

	return arrayFilter(cells, function(cell) {
		return getDistance(cell, enemyCell) >= minDistance;
	});
}

function getNearestLeekEnemy() {
	var enemies = getAliveEnemies();
	var startCell = getCell();

	enemies = arrayFilter(enemies, function(e) {
		return !isSummon(e);
	});

	return arrayFoldLeft(enemies, function(nearestEnemy, e) {
		var enemyPathLength = getPathLength(startCell, getCell(e));
		var nearestEnemyPathLength = getPathLength(startCell, getCell(nearestEnemy));
		var isNearest = enemyPathLength !== null && enemyPathLength < nearestEnemyPathLength;
		return isNearest ? e : nearestEnemy;
	}, shift(enemies));
}

function getReachableCellsOnTurn(enemy) {
	var startCell = getCell();
	var x = getCellX(startCell);
	var y = getCellY(startCell);
	var cells = [];

	for (var j = y - 10; j <= y + 10; j++) {
		for (var i = x - 10; i <= x + 10; i++) {
			push(cells, getCellFromXY(i, j));
		}
	}

	return removeUnreachableCellsOnTurn(cells);
}

function isPoisoned(leek) {
	for (var effect in getEffects()) {
		if (effect[0] === EFFECT_POISON) {
			return true;
		}
	}
	return false;
}

function move(enemy, mode) {
	debug('move(' + mode + ')');

	if (getMP() > 0) {
		var startCell = getCell();
		var enemyCell = getCell(enemy);
		var minDistance = getMinDistance(enemy);

		if (getTP() > 0) {
			if (mode === SNEAK_MODE) {
				say('Avançons prudemment...');
			} else if (mode === ESCAPE_MODE) {
				say('Sauve qui peut !');
			}
		}

		var highlyCoveredCells = getHighlyCoveredCells(enemy);
		var filteredHighlyCoveredCells = getMinDistanceCells(highlyCoveredCells, enemy);

		if (mode === SNEAK_MODE) {
			filteredHighlyCoveredCells = getCloserCellsTo(filteredHighlyCoveredCells, enemyCell);
		}

		debug('filteredHighlyCoveredCells: ' + arrayConcat([], filteredHighlyCoveredCells));

		if (count(filteredHighlyCoveredCells) > 0) {
			mark(filteredHighlyCoveredCells);
			debug('move to highly covered cell');
			debug('move: ' + moveTowardCell(getClosestCellTo(filteredHighlyCoveredCells, enemyCell)));
		} else {
			var coveredCells = getCoveredCells(enemy);
			var filteredCoveredCells = getMinDistanceCells(coveredCells, enemy);

			if (mode === SNEAK_MODE) {
				filteredCoveredCells = getCloserCellsTo(filteredCoveredCells, enemyCell);
			}

			debug('filteredCoveredCells: ' + arrayConcat([], filteredCoveredCells));

			if (count(filteredCoveredCells) > 0) {
				mark(filteredCoveredCells);
				debug('move to covered cell');
				debug('move: ' + moveTowardCell(getClosestCellTo(filteredCoveredCells, enemyCell)));
			} else {
				var distance = getDistance(startCell, enemyCell);
				var reachableCells = getReachableCellsOnTurn(enemy);

				if (count(reachableCells) == 0) {
					debug('no reachable cell found :(');
					return;
				}

				var minDistanceCells = getMinDistanceCells(reachableCells, enemy);
				var hiddenCells = getHiddenCells(reachableCells, enemy);
				var targetCells = count(hiddenCells) > 0 ? hiddenCells : minDistanceCells;

				if (mode === ESCAPE_MODE) {
					if (distance < minDistance) {
						var targetCell = count(minDistanceCells) > 0 ?
							getClosestCellTo(minDistanceCells, enemyCell) :
							getFarthestCellFrom(targetCells, enemyCell);

						debug('run away');
						debug('move: ' + moveTowardCell(targetCell));
					}
				} else if (mode === SNEAK_MODE) {
					if (distance > minDistance) {
						debug('sneak to enemy');

						if (count(minDistanceCells) > 0) {
							debug('move: ' + moveTowardCell(getClosestCellTo(targetCells, enemyCell)));
						} else {
							debug('no cell found with min distance');
						}
					} else if (distance < minDistance) {
						move(enemy, ESCAPE_MODE);
					}
				} else {
					debugE('Unknown move mode');
				}
			}
		}
	}
}

function Once() {
	var flagArray = [];

	return @(function() {
		debug('reset once');
		var currentIndex = -1;

		return @(function(willBeUsed) {
			currentIndex++;

			if (count(flagArray) < (currentIndex + 1)) {
				flagArray[currentIndex] = true;
			}

			if (willBeUsed) {
				var result = flagArray[currentIndex];

				if (result) {
					flagArray[currentIndex] = false;
				} else {
					debug('already did once');
				}
				return result;
			}
			return false;
		});
	});
}

function Optimizer() {
	var startIndex = 0;
	var currentIndex;

	return @(function() {
		debug('reset optimizer');
		currentIndex = -1;

		return @(function() {
			currentIndex++;

			if (currentIndex >= startIndex) {
				startIndex = currentIndex;
				return true;
			}
			return false;
		});
	});
}

function showResult(result) {
	var humanReadableResult = 'UNKNOWN';

	if (result == USE_CRITICAL) {
		humanReadableResult = 'CRITICAL';
	} else if (result === USE_SUCCESS) {
		humanReadableResult = 'SUCCESS';
	} else if (result === USE_FAILED) {
		humanReadableResult = 'FAILED';
	} else if (result === USE_INVALID_TARGET) {
		debugE('INVALID_TARGET');
		humanReadableResult = 'INVALID_TARGET';
	} else if (result === USE_NOT_ENOUGH_TP) {
		debugE('NOT_ENOUGH_TP');
		humanReadableResult = 'NOT_ENOUGH_TP';
	} else if (result === USE_INVALID_POSITION) {
		debugE('INVALID_POSITION');
		humanReadableResult = 'INVALID_POSITION';
	} else if (result === USE_INVALID_COOLDOWN) {
		debugE('INVALID_COOLDOWN');
		humanReadableResult = 'INVALID_COOLDOWN';
	}

	debug('result: ' + humanReadableResult);
}

function summonBulb(bulb, ai, enemy) {
	var enemyCell = getCell(enemy);
	var summonerCell = getCell();
	var x = getCellX(summonerCell);
	var y = getCellY(summonerCell);

	// TODO manage differet ranges
	var possibleCells = removeUnreachableCells([
		getCellFromXY(x, y - 2),
		getCellFromXY(x, y - 1),
		getCellFromXY(x, y + 1),
		getCellFromXY(x, y + 2),
		getCellFromXY(x - 2, y),
		getCellFromXY(x - 1, y),
		getCellFromXY(x + 1, y),
		getCellFromXY(x + 2, y),
		getCellFromXY(x - 1, y - 1),
		getCellFromXY(x - 1, y + 1),
		getCellFromXY(x + 1, y - 1),
		getCellFromXY(x + 1, y + 1),
	]);

	possibleCells = arraySort(possibleCells, function(a, b) {
		return getDistance(enemyCell, a) < getDistance(enemyCell, b) ? -1 : 1;
	});

	if (count(possibleCells) > 0) {
		showResult(summon(bulb, shift(possibleCells), ai));
	} else {
		debug('No cell available for bulb :(');
	}
}
