include('logger');
include('map');
include('store');
include('utils');

// TODO optimizes area arms management to reach as enemies as possible

global FIGHT_EFFECTS = [EFFECT_DAMAGE, EFFECT_POISON];
global MIN_DIRECT_CELLS_AROUND = 2;
global SAFE_LEVEL = 80;

global turnsWithoutFire = 0;

function canFireWithChip(chip, target) {
	logInfo('');
	logInfo('canFireWithChip(' + getChipName(chip) + ')');
	increaseLogIndent();

	var debugOperations = monitorOperations();
	var canFire = getTP() >= getChipCost(chip) && getCooldown(chip) === 0;

	if (canFire && target !== getLeek()) {
		var cellToFire = getCellToFireWithChip(chip, target);
		var pathlength = getPathLength(getCell(), cellToFire);

		canFire = cellToFire !== null && getMP() >= pathlength;

		if (canFire) {
			canFire = shouldFire(target, chip, cellToFire, pathlength);
		}
	}

	decreaseLogIndent();
	logDetail(canFire);
	debugOperations();
	return canFire;
}

function canFireWithWeapon(weapon, enemy) {
	logInfo('');
	logInfo('canFireWithWeapon(' + getWeaponName(weapon) + ')');
	increaseLogIndent();

	var debugOperations = monitorOperations();
	var cost = getWeaponCost(weapon);
	var canFire = false;

	if (getWeapon() !== weapon) {
		cost = cost + 1;
	}

	if (getTP() >= cost) {
		var cellToFire = getCellToFireWithWeapon(weapon, enemy);
		var pathlength = getPathLength(getCell(), cellToFire);

		canFire = cellToFire !== null &&
			getMP() >= pathlength &&
			shouldFire(enemy, weapon, cellToFire, pathlength);
	}

	decreaseLogIndent();
	logDetail(canFire);
	debugOperations();
	return canFire;
}

function ensureWearingWeapon(weapon) {
	if (getWeapon() !== weapon) {
		setWeapon(weapon);
	}
}

function fire(arm, target) {
	logInfo('');
	debug('fire(' + getArmName(arm) + ', ' + getEnemyName(target) + ')');
	increaseLogIndent();

	var hasFired = false;
	var hasError = false;
	var result;

	if (isWeapon(arm)) {
		// Has to be done before calling getTargetEnemy
		moveTowardCell(getCellToFireWithWeapon(arm, target));
		target = getTargetEnemy(arm, target);

		if (target !== null) {
			ensureWearingWeapon(arm);
			result = useWeapon(target);
			hasFired = true;
		} else {
			debugW('Unable to find a target enemy');
		}
	} else {
		if (target !== getLeek()) {
			moveTowardCell(getCellToFireWithChip(arm, target));

			if (!isAlly(target)) {
				hasFired = true;
			}
		}

		if (
			isAreaArm(arm) && (
				(isChip(arm) && !canUseChip(arm, target)) ||
				(isWeapon(arm) && !canUseWeapon(arm, target))
			)
		) {
			var targetCell = getCell(target);
			var targetableDeltaCells = getTargetableDeltaCells(
				targetCell, arm
			);

			if (safeCount(targetableDeltaCells) > 0) {
				for (var cell in targetableDeltaCells) {
					if (canUseChipOnCell(arm, cell)) {
						logDetail('fire on delta cell: ' + cell);
						result = useChipOnCell(arm, cell);
						break;
					}
				}
			} else {
				debugE('Cannot use arm ' + getArmName(arm) + ' on cell ' + targetCell);
			}
		} else {
			result = useChip(arm, target);
		}
	}

	decreaseLogIndent();
	showResult(result);

	if (
		result !== USE_SUCCESS &&
		result !== USE_FAILED &&
		result !== USE_CRITICAL
	) {
		hasError = true;
	}

	return [hasFired, hasError];
}

function getArmName(arm) {
	return isChip(arm) ?
		getChipName(arm) :
		getWeaponName(arm);
}

function getCellSafetyLevel(cell) {
	var level = 0;
	var highlyProtectedAgainstBulbs = true;
	var highlyProtectedAgainstLeeks = true;
	var protectedAgainstBulbs = true;
	var protectedAgainstLeeks = true;
	var middlyProtectedAgainstBulbs = true;
	var middlyProtectedAgainstLeeks = true;

	for (var enemy in getDangerousEnemies()) {
		var enemyPathLength = getEnemyPathLengthToFireOnCell(
			cell, enemy, false
		);

		if (enemyPathLength !== null) {
			var enemyMP = getTotalMP(enemy);

			if (enemyPathLength <= (enemyMP * 4 / 3)) {
				if (isSummon(enemy)) {
					highlyProtectedAgainstBulbs = false;
				} else {
					highlyProtectedAgainstLeeks = false;
				}

				if (enemyPathLength <= enemyMP) {
					if (isSummon(enemy)) {
						protectedAgainstBulbs = false;
					} else {
						protectedAgainstLeeks = false;
					}

					if (enemyPathLength <= (enemyMP * 2 / 3)) {
						if (isSummon(enemy)) {
							middlyProtectedAgainstBulbs = false;
						} else {
							middlyProtectedAgainstLeeks = false;
						}

						if (
							!middlyProtectedAgainstBulbs &&
							!middlyProtectedAgainstLeeks
						) {
							break;
						}
					}
				}
			}
		}
	}

	if (highlyProtectedAgainstBulbs && highlyProtectedAgainstLeeks) {
		level = 120;
	} else if (protectedAgainstBulbs && highlyProtectedAgainstLeeks) {
		level = 110;
	} else if (protectedAgainstBulbs && protectedAgainstLeeks) {
		level = 100;
	} else if (middlyProtectedAgainstBulbs && protectedAgainstLeeks) {
		level = 80;
	} else if (protectedAgainstLeeks) {
		level = 70;
	} else if (middlyProtectedAgainstLeeks) {
		level = 60;
	}

	var cellsAround = getDirectReachableCellsAround(cell);

	if (safeCount(cellsAround) < MIN_DIRECT_CELLS_AROUND) {
		level -= 20;
	}

	if (isBorderCell(cell)) {
		level -= 20;
	}

	return level;
}

function getCellsToFireWithChipOnCell(chip, thrower, targetCell) {
	var ignoredCells = [getCell(thrower)];
	var cellsToFire = ensureArray(
		getCellsToUseChipOnCell(chip, targetCell, ignoredCells)
	);

	if (isAreaArm(chip)) {
		var targetableDeltaCells = getTargetableDeltaCells(targetCell, chip);

		for (var cell in targetableDeltaCells) {
			var newCellsToFire = ensureArray(
				getCellsToUseChipOnCell(chip, cell, ignoredCells)
			);

			for (var newCellToFire in newCellsToFire) {
				if (!inArray(cellsToFire, newCellToFire)) {
					push(cellsToFire, newCellToFire);
				}
			}
		}
	}

	return cellsToFire;
}

function getCellsToFireWithWeaponOnCell(weapon, shooter, targetCell) {
	var startCell = getCell(shooter);
	var ignoredCells = [startCell];
	var otherEnemiesCells = [];
	var weaponArea = getWeaponArea(weapon);

	// The getCellsToUseWeapon function does not take into acount that
	// the laser weapons can cross enemies
	if (weaponArea === AREA_LASER_LINE) {
		var aliveEnemies = shooter === getLeek() ?
			getAliveEnemies() :
			getAliveAllies();

		otherEnemiesCells = arrayMap(aliveEnemies, function(otherEnemy) {
			return getCell(otherEnemy);
		});
		pushAll(ignoredCells, ensureArray(otherEnemiesCells));
	}

	// Removes enemy cells
	var cellsToFire = ensureArray(
		getCellsToUseWeaponOnCell(weapon, targetCell, ignoredCells)
	);

	if (isAreaArm(weapon)) {
		var targetableDeltaCells = getTargetableDeltaCells(targetCell, weapon);

		for (var cell in targetableDeltaCells) {
			var newCellsToFire = ensureArray(
				getCellsToUseWeaponOnCell(weapon, cell, ignoredCells)
			);

			for (var newCellToFire in newCellsToFire) {
				if (!inArray(cellsToFire, newCellToFire)) {
					push(cellsToFire, newCellToFire);
				}
			}
		}
	}

	return ensureArray(
		arrayFilter(cellsToFire, function(cell) {
			return !inArray(otherEnemiesCells, cell);
		})
	);
}

function getCellToFireWithChip(chip, target) {
	logInfo('getCellToFireWithChip(' + getChipName(chip) + ', ' + getEnemyName(target) + ')');

	var startCell = getCell();
	var targetCell = getCell(target);
	var cellToFire = null;
	var cellsToFire = [];

	if (canUseChip(chip, target)) {
		cellToFire = startCell;
	} else {
		cellsToFire = getCellsToFireWithChipOnCell(chip, getLeek(), targetCell);
		logDetail('getCellsToFireWithChip: ' + arrayConcat([], cellsToFire));
		cellsToFire = getMinPathCells(cellsToFire);
		logDetail('getMinPathCells: ' + arrayConcat([], cellsToFire));
		cellToFire = getFarthestCellFrom(cellsToFire, targetCell);
	}

	logDetail('cellsToFire: ' + arrayConcat([], cellsToFire));
	logDetail('startCell: ' + startCell);
	logDetail('cellToFire: ' + cellToFire);
	logDetail('pathLength: ' + getPathLength(startCell, cellToFire));

	return cellToFire;
}

function getCellToFireWithWeapon(weapon, enemy) {
	logInfo('getCellToFireWithWeapon(' + getWeaponName(weapon) + ')');

	var startCell = getCell();
	var cellToFire = null;
	var cells = [];

	if (canUseWeapon(weapon, enemy)) {
		cellToFire = startCell;
	} else {
		cells = getCellsToFireWithWeaponOnCell(weapon, getLeek(), getCell(enemy));
		logDetail('getCellsToFireWithWeapon: ' + (cells !== null ? arrayConcat([], cells) : null));
		cells = getMinPathCells(cells);
		logDetail('getMinPathCells: ' + (cells !== null ? arrayConcat([], cells) : null));
		cellToFire = getFarthestCellFrom(cells, getCell(enemy));
	}

	logDetail('startCell: ' + startCell);
	logDetail('cellToFire: ' + cellToFire);
	logDetail('pathLength: ' + getPathLength(startCell, cellToFire));

	return cellToFire;
}

function getDangerousEnemies() {
	return ensureArray(
		arrayFilter(getAliveEnemies(), function(enemy) {
			var refArms = getEnemyRefArms(enemy);
			return refArms['chip'] !== null ||
				refArms['weapon'] !== null;
		})
	);
}

function getEnemyFightChips(enemy) {
	return ensureArray(
		arrayFilter(getChips(enemy), function(chip) {
			for (var effect in getChipEffects(chip)) {
				if (inArray(FIGHT_EFFECTS, effect[0])) {
					return getCooldown(chip, enemy) <= 1;
				}
			}
			return false;
		})
	);
}

function getEnemyName(enemy) {
	if (enemy === null) {
		return null;
	}
	return getName(enemy) +
		(isSummon(enemy) ? ('_' + enemy) : '');
}

function getEnemyPathLengthToFireOnCell(cell, enemy, debug) {
	var cacheKey = 'tmp-enemy-path-length-' +
		cell + '-' + enemy;

	if (hasInStore(cacheKey)) {
		return getInStore(cacheKey);
	}

	var enemyCell = getCell(enemy);
	var refArms = getEnemyRefArms(enemy);
	var refChip = refArms['chip'];
	var refWeapon = refArms['weapon'];

	if (refChip === null && refWeapon === null) {
		return null;
	}

	var cellsToFire = [];

	if (refChip !== null) {
		pushAll(
			cellsToFire,
			getCellsToFireWithChipOnCell(refChip, enemy, cell)
		);
	}

	if (refWeapon !== null) {
		pushAll(
			cellsToFire,
			getCellsToFireWithWeaponOnCell(refWeapon, enemy, cell)
		);
	}

	if (safeCount(cellsToFire) === 0) {
		return null;
	}

	var cellToFire = getClosestCellTo(cellsToFire, enemyCell);

	if (debug) {
		mark(cellsToFire, getColor(255, 100, 100));

		var weaponArea = getWeaponArea(refWeapon);

		if (weaponArea !== AREA_LASER_LINE && weaponArea !== AREA_POINT) {
			mark(getTargetableDeltaCells(cell, refWeapon), COLOR_BLUE);
		}
		mark([cellToFire], COLOR_RED);
	}

	var pathLength = getPathLength(enemyCell, cellToFire);
	putInStore(cacheKey, pathLength);
	return pathLength;
}

function getEnemyRefArms(enemy) {
	// Same name for all bulbs that have the same type
	var cacheKey = 'refArms-' + getName(enemy);

	if (hasInStore(cacheKey)) {
		return jsonDecode(getInStore(cacheKey));
	}

	var refChip = getMaxRangeChip(getEnemyFightChips(enemy));
	var refWeapon = !isSummon(enemy) ?
		getMaxRangeWeapon(getWeapons(enemy)) :
		null;
	var refArms = ['chip': refChip, 'weapon': refWeapon];

	if (refChip !== null || refWeapon !== null) {
		var chipName = refChip !== null ?
			getChipName(refChip) :
			null;
		var weaponName = refWeapon !== null ?
			getWeaponName(refWeapon) :
			null;

		logDetail('refArms of ' + getEnemyName(enemy) + ': ' + chipName + ', ' + weaponName);
	} else if (!isSummon(enemy)) {
		debugE('Unable to retrieve ' + getEnemyName(enemy) + ' ref arms');
	}

	putInStore(cacheKey, jsonEncode(refArms));
	return refArms;
}

function getMaxRangeChip(chips) {
	if (safeCount(chips) === 0) {
		return null;
	}

	var maxRangeChip = null;
	var maxRange = 0;

	for (var chip in chips) {
		var chipMaxRange = getChipMaxRange(chip);
		var chipArea = getChipArea(chip);

		if (chipArea === AREA_CIRCLE_1) {
			chipMaxRange += 1;
		} else if (chipArea === AREA_CIRCLE_2) {
			chipMaxRange += 2;
		} else if (chipArea === AREA_CIRCLE_3) {
			chipMaxRange += 3;
		}

		if (chipMaxRange > maxRange) {
			maxRangeChip = chip;
			maxRange = chipMaxRange;
		}
	}
	return maxRangeChip;
}

function getMaxRangeWeapon(weapons) {
	if (safeCount(weapons) === 0) {
		return null;
	}

	var maxRangeWeapon = null;
	var maxRange = 0;

	for (var weapon in weapons) {
		var weaponMaxRange = getWeaponMaxRange(weapon);
		var weaponArea = getWeaponArea(weapon);

		if (weaponArea === AREA_CIRCLE_1) {
			weaponMaxRange += 1;
		} else if (weaponArea === AREA_CIRCLE_2) {
			weaponMaxRange += 2;
		} else if (weaponArea === AREA_CIRCLE_3) {
			weaponMaxRange += 3;
		}

		if (weaponMaxRange > maxRange) {
			maxRangeWeapon = weapon;
			maxRange = weaponMaxRange;
		}
	}
	return maxRangeWeapon;
}

function getNearestLeekEnemy() {
	var enemies = getAliveEnemies();
	var startCell = getCell();

	enemies = arrayFilter(enemies, function(enemy) {
		return !isSummon(enemy);
	});

	var firstEnemy = shift(enemies);
	var nearestEnemyPathLength = getPathLength(
		startCell, getCell(firstEnemy)
	);

	return arrayFoldLeft(enemies, function(nearestEnemy, enemy) {
		var enemyPathLength = getPathLength(startCell, getCell(enemy));

		if (
			enemyPathLength !== null &&
			enemyPathLength < nearestEnemyPathLength
		) {
			nearestEnemyPathLength = enemyPathLength;
			return enemy;
		}
		return nearestEnemy;
	}, firstEnemy);
}

function getNextCell(enemy, startCell, availableMP, shouldMark) {
	var debugOperations = monitorOperations();
	var nextCell = startCell;
	logInfo('getNextCell()');
	logDetail('enemy: ' + getEnemyName(enemy));
	logDetail('startCell: ' + startCell);
	logDetail('availableMP: ' + availableMP);

	var cacheKey = 'tmp-nextCell-' + enemy + '-' +
		startCell + '-' + availableMP;

	if (hasInStore(cacheKey)) {
		logDetail('use cache');
		nextCell = getInStore(cacheKey);

		if (
			shouldMark &&
			getCellSafetyLevel(nextCell) >= SAFE_LEVEL
		) {
			mark([nextCell], getColor(255, 128, 210));
		}
	} else if (availableMP > 0) {
		var reachableCells = getReachableCells(
			startCell, availableMP
		);

		var debugOperationsInt = monitorIntermediateOperations(
			'iterates cells safety (' + safeCount(reachableCells) +
			' entries)'
		);
		var maxSafetyLevel = 0;
		var maxSafetyCells = [];

		for (var cell in reachableCells) {
			var safetyLevel = getCellSafetyLevel(cell);

			if (safetyLevel > maxSafetyLevel) {
				maxSafetyLevel = safetyLevel;
				maxSafetyCells = [cell];
			} else if (safetyLevel === maxSafetyLevel) {
				push(maxSafetyCells, cell);
			}
		}
		debugOperationsInt();

		var maxSafetyCellsCount = safeCount(maxSafetyCells);

		if (maxSafetyCellsCount > 0) {
			logDetail(maxSafetyCellsCount + ' cells found with safety ' + maxSafetyLevel);

			var enemyCell = getCell(enemy);

			if (maxSafetyLevel >= SAFE_LEVEL) {
				nextCell = getClosestCellTo(
					maxSafetyCells, enemyCell
				);

				if (nextCell === null) {
					debugE('Error during nextCell computing (safe)');
					logDetail('maxSafetyCells: ' + maxSafetyCells);
					logDetail('enemyCell: ' + enemyCell);
					nextCell = startCell;
				}

				if (shouldMark) {
					mark(maxSafetyCells, getColor(255, 128, 210));
				}
			} else {
				nextCell = getFarthestCellFrom(
					maxSafetyCells, enemyCell
				);

				if (nextCell === null) {
					debugE('Error during nextCell computing (not safe)');
					logDetail('maxSafetyCells: ' + maxSafetyCells);
					logDetail('enemyCell: ' + enemyCell);
					nextCell = startCell;
				}
			}
		} else {
			debugW('No cell found');
		}

		putInStore(cacheKey, nextCell);
	}

	logDetail('nextCell: ' + nextCell);
	debugOperations();

	return nextCell;
}

function getAreaImpactedCells(targetCell, arm) {
	var deltas;
	var x = getCellX(targetCell);
	var y = getCellY(targetCell);
	var area = isChip(arm) ?
		getChipArea(arm) :
		getWeaponArea(arm);

	if (area === AREA_CIRCLE_1) {
		deltas = [
			[0, 1],
			[1, 0],
			[0, -1],
			[-1, 0]
		];
	} else if (area === AREA_CIRCLE_2) {
		deltas = [
			[0, -2],
			[0, -1],
			[0, 1],
			[0, 2],
			[-2, 0],
			[-1, 0],
			[1, 0],
			[2, 0],
			[-1, -1],
			[-1, 1],
			[1, -1],
			[1, 1],
		];
	} else if (area === AREA_CIRCLE_3) {
		deltas = [
			[0, -3],
			[0, -2],
			[0, -1],
			[0, 1],
			[0, 2],
			[0, 3],
			[-3, 0],
			[-2, 0],
			[-1, 0],
			[1, 0],
			[2, 0],
			[3, 0],
			[-2, -1],
			[-2, 1],
			[-1, -2],
			[-1, -1],
			[-1, 1],
			[-1, 2],
			[1, -2],
			[1, -1],
			[1, 1],
			[1, 2],
			[2, -1],
			[2, 1],
		];
	} else {
		debugE('Invalid arm area: ' + getArmName(arm) + ' ' + area);
		return [];
	}

	var deltaCells = arrayMap(deltas, function(delta) {
		return getCellFromXY(x + delta[0], y + delta[1]);
	});

	return ensureArray(
		arrayFilter(deltaCells, function(cell) {
			return cell !== null;
		})
	);
}

function getTargetableDeltaCells(targetCell, arm) {
	var range = 0;
	var targetableCells = [];
	var x = getCellX(targetCell);
	var y = getCellY(targetCell);
	var area = isChip(arm) ?
		getChipArea(arm) :
		getWeaponArea(arm);

	if (area === AREA_CIRCLE_1) {
		range = 1;
	} else if (area === AREA_CIRCLE_2) {
		range = 2;
	} else if (area === AREA_CIRCLE_3) {
		range = 3;
	} else {
		debugE('Invalid arm area: ' + getArmName(arm) + ' ' + area);
		return [];
	}

	for (var i = (x - range); i <= (x + range); i++) {
		for (var j = (y - range); j <= (y + range); j++) {
			var cell = getCellFromXY(i, j);

			if (cell !== null && !isObstacle(cell)) {
				var impactedCells = getAreaImpactedCells(cell, arm);

				if (inArray(impactedCells, targetCell)) {
					push(targetableCells, cell);
				}
			}
		}
	}

	return targetableCells;
}

function getTargetEnemy(weapon, enemy) {
	var currentCell = getCell();
	var targetEnemy = null;

	if (canUseWeapon(weapon, enemy)) {
		targetEnemy = enemy;
	} else {
		// There may be another enemy between me and my target

		for (var aliveEnemy in getAliveEnemies()) {
			var aliveEnemyCell = getCell(aliveEnemy);
			var enemyCell = getCell(enemy);

			if (
				aliveEnemy !== enemy &&
				canUseWeapon(weapon, aliveEnemy) &&
				isOnSameLine(currentCell, aliveEnemyCell) &&
				isOnSameLine(currentCell, enemyCell) &&
				isOnSameLine(enemyCell, aliveEnemyCell) &&
				getDistance(enemyCell, aliveEnemyCell) < getDistance(enemyCell, currentCell)
			) {
				targetEnemy = aliveEnemy;
				break;
			}
		}
	}

	logInfo(
		'getTargetEnemy(): ' + getEnemyName(targetEnemy) +
		(targetEnemy !== null ? (' on cell ' + getCell(targetEnemy)) : '')
	);

	return targetEnemy;
}

function hasBeenAffected() {
	var me = getLeek();

	for (var effect in getEffects()) {
		var caster = effect[2];

		if (caster !== me && !isAlly(caster)) {
			return true;
		}
	}
	return false;
}

function initTurn() {
	clearStore();

	if (getTurn() === 1) {
		logInfo('Computes enemies ref arms');

		arrayIter(getAliveEnemies(), function(enemy) {
			getEnemyRefArms(enemy);
		});
	}
}

function isAreaArm(arm) {
	var area = isChip(arm) ?
		getChipArea(arm) :
		getWeaponArea(arm);

	return area === AREA_CIRCLE_1 ||
		area === AREA_CIRCLE_2 ||
		area === AREA_CIRCLE_3;
}

function isPoisoned(leek) {
	for (var effect in getEffects()) {
		if (effect[0] === EFFECT_POISON) {
			return true;
		}
	}
	return false;
}

function move(enemy) {
	logInfo('');
	logInfo('move(' + getEnemyName(enemy) + ')');
	increaseLogIndent();

	var debugOperations = monitorOperations();

	if (getMP() === 0) {
		return;
	}

	var nextCell = getNextCell(enemy, getCell(), getMP(), true);

	if (nextCell === null) {
		debugE('Unable to find the next cell, do not move');
		decreaseLogIndent();
		return;
	}

	var enemyPathLength = getEnemyPathLengthToFireOnCell(
		nextCell, enemy, true
	);

	decreaseLogIndent();
	logDetail(
		'to ' + nextCell +
		' (safety: ' + getCellSafetyLevel(nextCell) +
		', path length: ' + enemyPathLength + ')'
	);

	if (nextCell !== getCell()) {
		moveTowardCell(nextCell);
	}
	debugOperations();
}

function shouldFire(target, arm, cellToFire, pathlength) {
	logInfo('shouldFire()');

	var debugOperations = monitorOperations();
	var should = false;

	if (pathlength === 0) {
		should = true;
		logDetail('can fire without moving');
	} else {
		var mpDecrease = 0;
		var armEffects = isWeapon(arm) ?
			getWeaponEffects(arm) :
			getChipEffects(arm);

		for (var effects in armEffects) {
			if (effects[0] === EFFECT_SHACKLE_MP) {
				mpDecrease = floor(effects[1] * (1 + getMagic() / 100));
				break;
			}
		}

		if (mpDecrease > 0) {
			logDetail('mpDecrease: ' + mpDecrease);
		}

		if (pathlength <= (mpDecrease / 2)) {
			should = true;
			logDetail('path length <= 1/2 mp decrease');
		} else {
			increaseLogIndent();

			// We do not want to take summons into account
			var initialEnemy = getNearestLeekEnemy();
			var initialEnemyCell = getCell(initialEnemy);
			var availableMP = getMP() - pathlength;
			var nextCell = getNextCell(
				initialEnemy, getCell(), getMP(), false
			);
			var safetyLevel = 'unknown';
			var nextCellAfterFire = getNextCell(
				initialEnemy, cellToFire, availableMP, false
			);
			var safetyLevelAfter = 'unknown';
			var pathLengthAfter = 'unknown';
			var isSafe = false;
			var isSafeForPoison = false;
			var isSafeAfterInactivity = false;
			var isNotWorst = false;

			if (nextCell !== null && nextCellAfterFire !== null) {
				var enemyDistance = getDistance(initialEnemyCell, nextCell);
				var enemyDistanceAfter = getDistance(initialEnemyCell, nextCellAfterFire);

				safetyLevel = getCellSafetyLevel(nextCell);
				safetyLevelAfter = getCellSafetyLevel(nextCellAfterFire);
				pathLengthAfter = getEnemyPathLengthToFireOnCell(
					nextCellAfterFire, initialEnemy, false
				);
				isSafe = safetyLevelAfter >= SAFE_LEVEL;
				isSafeForPoison = target === initialEnemy &&
					(arm === CHIP_TOXIN || arm === CHIP_VENOM) &&
					!isPoisoned(initialEnemy) &&
					safetyLevelAfter >= 60;
				isSafeAfterInactivity = turnsWithoutFire >= 1 &&
					safetyLevelAfter >= 70;
				isNotWorst = safetyLevelAfter >= safetyLevel &&
					enemyDistanceAfter >= enemyDistance;
			} else {
				if (nextCell === null) {
					debugE('nextCell null');
				}
				if (nextCellAfterFire === null) {
					debugE('nextCellAfterFire null');
				}
			}

			decreaseLogIndent();
			logDetail('nextCell: ' + nextCell);
			logDetail('cellToFire: ' + cellToFire);
			logDetail('availableMP: ' + availableMP);
			logDetail('nextCellAfterFire: ' + nextCell);
			logDetail(
				(isSafe ? '' : 'not ') + 'safe (' + safetyLevelAfter + ', ' + pathLengthAfter + '), ' +
				(isSafeForPoison ? '' : 'not ') + 'safe for poison, ' +
				(isSafeAfterInactivity ? '' : 'not ') + 'safe after inactivity, ' +
				(isNotWorst ? 'not ' : '') + 'worst'
			);

			should = isSafe || isSafeForPoison || isSafeAfterInactivity || isNotWorst;
		}
	}

	debugOperations();
	return should;
}

function summonBulb(bulb, ai, enemy) {
	var enemyCell = getCell(enemy);
	var summonerCell = getCell();
	var x = getCellX(summonerCell);
	var y = getCellY(summonerCell);
	var deltas;

	if (bulb === CHIP_HEALER_BULB || bulb === CHIP_ICED_BULB) {
		deltas = [
			[0, -2],
			[0, -1],
			[0, 1],
			[0, 2],
			[-2, 0],
			[-1, 0],
			[1, 0],
			[2, 0],
			[-1, -1],
			[-1, 1],
			[1, -1],
			[1, 1],
		];
	} else if (bulb === CHIP_PUNY_BULB || bulb === CHIP_ROCKY_BULB) {
		deltas = [
			[0, -3],
			[0, -2],
			[0, -1],
			[0, 1],
			[0, 2],
			[0, 3],
			[-3, 0],
			[-2, 0],
			[-1, 0],
			[1, 0],
			[2, 0],
			[3, 0],
			[-2, -1],
			[-2, 1],
			[-1, -2],
			[-1, -1],
			[-1, 1],
			[-1, 2],
			[1, -2],
			[1, -1],
			[1, 1],
			[1, 2],
			[2, -1],
			[2, 1],
		];
	}

	var deltaCells = arrayMap(deltas, function(delta) {
		return getCellFromXY(x + delta[0], y + delta[1]);
	});

	var possibleCells = arrayFilter(deltaCells, function(cell) {
		return cell !== null && canUseChipOnCell(bulb, cell);
	});

	if (safeCount(possibleCells) > 0) {
		var targetCell = bulb === CHIP_HEALER_BULB ?
			getFarthestCellFrom(possibleCells, enemyCell) :
			getClosestCellTo(possibleCells, enemyCell);

		showResult(summon(bulb, targetCell, ai));
	} else {
		debugW('No cell available for bulb :(');
	}
}

function updateTurnsWithoutFire(hasFired) {
	turnsWithoutFire = hasFired ? 0 : turnsWithoutFire + 1;
}
