include('map');
include('store');
include('utils');

global FIGHT_EFFECTS = @[EFFECT_DAMAGE, EFFECT_POISON];
global MARK_ENEMY_CELLS_TO_FIRE = false;

function canFireOnCellFrom(@casterCell, @targetCell, @arm) {
	if (targetCell === null || casterCell === null) {
		return false;
	}

	var isArmChip = isChip(@arm);
	var isInline = isArmChip ?
		@(isInlineChip(@arm)) :
		@(isInlineWeapon(@arm));

	if (isInline && !isOnSameLine(@casterCell, @targetCell)) {
		return false;
	}

	var distance = @(getCellDistance(@casterCell, @targetCell));
	var maxRange = isArmChip ?
		@(getChipMaxRange(@arm)) :
		@(getWeaponMaxRange(@arm));
	var minRange = isArmChip ?
		@(getChipMinRange(@arm)) :
		@(getWeaponMinRange(@arm));

	if (distance < minRange || distance > maxRange) {
		return false;
	}

	var needLos = isArmChip ?
		@(chipNeedLos(@arm)) :
		@(weaponNeedLos(@arm));

	return !needLos || @(lineOfSight(@casterCell, @targetCell));
}

function ensureWearingWeapon(@weapon) {
	if (getWeapon() !== weapon) {
		setWeapon(@weapon);
	}
}

function getAliveAlliesCells() {
	var cacheKey = 'tmp-alv-ally-cells';

	if (hasInStore(cacheKey)) {
		return @(getInStore(cacheKey));
	}

	var alliesCells = @(arrayMap(@(getAliveAllies()), function(@ally) {
		return getCell(ally);
	}));
	putInStore(cacheKey, @alliesCells);
	return @alliesCells;
}

function getAliveEnemiesCells() {
	var cacheKey = 'tmp-alv-enmy-cells';

	if (hasInStore(cacheKey)) {
		return @(getInStore(cacheKey));
	}

	var enemyCells = @(arrayMap(@(getAliveEnemies()), function(@enemy) {
		return getCell(enemy);
	}));
	putInStore(cacheKey, @enemyCells);
	return @enemyCells;
}

function getAreaImpactedCells(@targetCell, @area) {
	var x = @(getCellX(@targetCell));
	var y = @(getCellY(@targetCell));
	var deltas = area === AREA_CIRCLE_1 ?
		@[
			@[0, 1],
			@[1, 0],
			@[0, -1],
			@[-1, 0]
		] :
		area === AREA_CIRCLE_2 ? [
			@[0, -2],
			@[0, -1],
			@[0, 1],
			@[0, 2],
			@[-2, 0],
			@[-1, 0],
			@[1, 0],
			@[2, 0],
			@[-1, -1],
			@[-1, 1],
			@[1, -1],
			@[1, 1],
		] :
		area === AREA_CIRCLE_3 ?
		@[
			@[0, -3],
			@[0, -2],
			@[0, -1],
			@[0, 1],
			@[0, 2],
			@[0, 3],
			@[-3, 0],
			@[-2, 0],
			@[-1, 0],
			@[1, 0],
			@[2, 0],
			@[3, 0],
			@[-2, -1],
			@[-2, 1],
			@[-1, -2],
			@[-1, -1],
			@[-1, 1],
			@[-1, 2],
			@[1, -2],
			@[1, -1],
			@[1, 1],
			@[1, 2],
			@[2, -1],
			@[2, 1],
		] :
		null;

	if (deltas === null) {
		debugE('Invalid area: ' + @area);
		return @[];
	}

	var deltaCells = @(arrayMap(@deltas, function(@delta) {
		return @(getCellFromXY(x + delta[0], y + delta[1]));
	}));

	return @(ensureArray(
		@(arrayFilter(@deltaCells, function(@cell) {
			return cell !== null;
		}))
	));
}

function getArmName(@arm) {
	return isChip(arm) ?
		getChipName(@arm) :
		getWeaponName(@arm);
}

function getCellCouplesToAreaFireOnCell(@arm, @caster, @targetCell) {
	var casterCell = @(getCell(@caster));
	var cellsToFire = @[];
	var cellCouplesToFire = @[];
	var targetableDeltaCells = @(getTargetableDeltaCells(@targetCell, @arm));
	var isArmChip = @(isChip(@arm));

	for (var targetDeltaCell in @targetableDeltaCells) {
		// Do not ignore allies as an ally could be on fire line otherwise
		var newCellsToFire = isArmChip ?
			@(getCellsToUseChipOnCell(
				@arm, @targetDeltaCell,
			)) :
			@(getCellsToUseWeaponOnCell(
				@arm, @targetDeltaCell,
			));

		for (var newCellToFire in @newCellsToFire) {
			if (!inArray(@cellsToFire, @newCellToFire)) {
				push(cellsToFire, @newCellToFire);
				push(
					cellCouplesToFire,
					[
						@newCellToFire,
						@targetDeltaCell
					]
				);
			}
		}
	}

	return @(arraySort(
		@cellCouplesToFire,
		function(@a, @b) {
			var distToTargetA = getCellDistance(@targetCell, @(a[1]));
			var distToTargetB = getCellDistance(@targetCell, @(b[1]));
			var distToCasterA = getCellDistance(@casterCell, @(a[0]));
			var distToCasterB = getCellDistance(@casterCell, @(b[0]));

			return (
					distToTargetA < distToTargetB ||
					(distToTargetA === distToTargetB && distToCasterA < distToCasterB)
				) ?
				-1 :
				(
					distToTargetA > distToTargetB ||
					(distToTargetA === distToTargetB && distToCasterA > distToCasterB)
				) ?
				1 :
				0;
		}
	));
}

function getCellsToDirectFireOnCell(@arm, @caster, @targetCell) {
	var casterCell = @(getCell(@caster));
	var ignoredCells = @[];
	var isArmChip = @(isChip(@arm));
	var area = isArmChip ?
		getChipArea(@arm) :
		getWeaponArea(@arm);

	// The getCellsToUseWeapon function does not take into acount that
	// the laser weapons can cross enemies
	if (area === AREA_LASER_LINE) {
		pushAll(
			ignoredCells,
			isAlly(@caster) ?
			@(getAliveEnemiesCells()) :
			@(getAliveAlliesCells())
		);
	}

	// Do not ignore allies as an ally could be on fire line otherwise
	var cells = isArmChip ?
		@(getCellsToUseChipOnCell(
			@arm, @targetCell, @ignoredCells
		)) :
		@(getCellsToUseWeaponOnCell(
			@arm, @targetCell, @ignoredCells
		));

	return @(ensureArray(
		@(arrayFilter(
			@cells,
			function(@cell) {
				return cell === casterCell || !inArray(@ignoredCells, @cell);
			}
		))
	));
}

function getCellToDirectFireOnCell(@arm, @caster, @targetCell) {
	var casterCell = @(getCell(@caster));
	var cellToFire = null;
	var cacheKey = 'tmp-directFireCell-' + arm + '-' + targetCell + '-' + casterCell;

	if (hasInStore(cacheKey)) {
		cellToFire = @(getInStore(@cacheKey));
	} else {
		if (canFireOnCellFrom(@casterCell, @targetCell, @arm)) {
			cellToFire = @casterCell;
		} else {
			var cellsToFire = getCellsToDirectFireOnCell(
				@arm, @caster, @targetCell
			);

			if (safeCount(@cellsToFire) > 0) {
				cellsToFire = @(getMinPathCells(@cellsToFire, @casterCell));

				if (safeCount(@cellsToFire) > 0) {
					cellToFire = @(getFarthestCellFrom(@cellsToFire, @targetCell));
				}
			}
		}
		putInStore(@cacheKey, @cellToFire);
	}

	return @cellToFire;
}

function getDangerousEnemies() {
	return @(ensureArray(
		@(arrayFilter(@(getAliveEnemies()), function(@enemy) {
			var arms = arrayConcat(
				@(getEnemyFightChips(@enemy)),
				@(ensureArray(@(getWeapons(@enemy))))
			);
			return safeCount(arms) > 0;
		}))
	));
}

function getEnemyFightChips(@enemy) {
	return @(ensureArray(
		@(arrayFilter(@(getChips(enemy)), function(@chip) {
			for (var effect in @(getChipEffects(chip))) {
				if (inArray(@FIGHT_EFFECTS, effect[0])) {
					return getCooldown(chip, enemy) <= 1;
				}
			}
			return false;
		}))
	));
}

function getEnemySortedArms(@enemy) {
	var cacheKey = 'tmp-sortedArms-' + enemy;

	if (hasInStore(@cacheKey)) {
		return @(getInStore(@cacheKey));
	}

	var arms = @(arrayConcat(
		@(getEnemyFightChips(@enemy)),
		@(ensureArray(@(getWeapons(@enemy))))
	));
	var sortedArms = @(arraySort(@arms, function(@a, @b) {
		var dammagesA = @(getArmDammages(@a, @enemy));
		var dammagesB = @(getArmDammages(@b, @enemy));
		return dammagesA > dammagesB ?
			-1 :
			dammagesA === dammagesB ? 0 : 1;
	}));

	putInStore(@cacheKey, @sortedArms);
	return @sortedArms;
}

function getTargetDeltaCellEfficiency(@arm, @targetCell, @targetDeltaCell) {
	var area = isChip(@arm) ?
		@(getChipArea(@arm)) :
		@(getWeaponArea(@arm));

	if (area === AREA_CIRCLE_1) {
		return 0.5;
	}
	if (area === AREA_CIRCLE_2) {
		var distance = getCellDistance(@targetCell, @targetDeltaCell);
		return distance === 1 ? 0.75 : 0.5;
	}
	if (area === AREA_CIRCLE_3) {
		var distance = getCellDistance(@targetCell, @targetDeltaCell);
		return distance === 1 ?
			0.83 :
			distance === 2 ?
			0.67 :
			0.5;
	}
}

function getEnemyPotentialDammagesOnCell(@cell, @enemy) {
	var arms = @(getEnemySortedArms(@enemy));
	var enemyMP = @(getTotalMP(@enemy));
	var enemyTP = @(getTotalTP(@enemy));
	var enemyCell = @(getCell(@enemy));
	var potentialDammages = 0;

	for (var arm in @arms) {
		var isArmChip = @(isChip(@arm));
		var armCost = isArmChip ?
			@(getChipCost(@arm)) :
			@(getWeaponCost(@arm));
		var initialArmCost = armCost + (
			!isArmChip && getWeapon(@enemy) !== @arm ? 1 : 0
		);
		var armDammages = @(getArmDammages(@arm, @enemy));
		var cellToFire = @(getCellToDirectFireOnCell(@arm, @enemy, @cell));

		if (cellToFire === null && isAreaArm(@arm)) {
			var couple = getReachableCellCoupleToAreaFireOnCell(@arm, @enemy, @cell);

			if (couple !== null) {
				cellToFire = couple[0];
				armDammages *= getTargetDeltaCellEfficiency(
					@arm, @cell, @(couple[1])
				);
			}
		}

		var pathLength = @(getPathLength(@enemyCell, @cellToFire));

		if (cellToFire !== null && enemyMP >= pathLength && enemyTP > initialArmCost) {
			var cooldown = isArmChip ? @(getChipCooldown(@arm)) : 0;

			enemyMP -= pathLength;
			enemyTP -= initialArmCost;
			potentialDammages += armDammages;

			if (cooldown === 0) {
				while (enemyTP >= armCost) {
					enemyTP -= armCost;
					potentialDammages += armDammages;
				}
			}

			if (enemyTP <= 1) {
				break;
			}
		}

		//logDetail(getArmName(@arm) + ': ' + cellToFire + ' (' + pathLength + '/' + enemyMP + ')');
	}

	logDetail(@cell + ': ' + potentialDammages);

	return @potentialDammages;
}

function getArmDammages(@arm, @caster) {
	var cacheKey = 'tmp-armDammages-' + arm + '-' + caster;

	if (!hasInStore(cacheKey)) {
		var effects = isChip(@arm) ?
			getChipEffects(@arm) :
			getWeaponEffects(@arm);
		var dammages = 0;

		for (var effect in @effects) {
			if (effect[0] === EFFECT_DAMAGE) {
				dammages += effect[1] * max(effect[3], 1) * (1 + getStrength(@caster) / 100);
			} else if (effect[0] === EFFECT_POISON) {
				dammages += effect[1] * max(effect[3], 1) * (1 + getMagic(@caster) / 100);
			}
		}

		putInStore(@cacheKey, @dammages);
	}
	return @(getInStore(@cacheKey));
}

function getLeekName(@leek) {
	if (leek === null) {
		return null;
	}
	return getName(@leek) +
		(isSummon(@leek) ? ('_' + leek) : '');
}

function getArmMaxRange(@arm) {
	var maxRange = isChip(@arm) ?
		getChipMaxRange(@arm) :
		getWeaponMaxRange(@arm);
	var area = isChip(@arm) ?
		getChipArea(@arm) :
		getWeaponArea(@arm);

	maxRange += area === AREA_CIRCLE_1 ?
		1 :
		area === AREA_CIRCLE_2 ?
		2 :
		area === AREA_CIRCLE_3 ?
		3 :
		0;

	return maxRange;
}

function getMaxRangeArm(@arms) {
	if (safeCount(@arms) === 0) {
		return null;
	}

	var maxRangeArm = null;
	var maxRange = 0;

	for (var arm in @arms) {
		var armMaxRange = getArmMaxRange(arm);

		if (
			armMaxRange > maxRange ||
			(armMaxRange === maxRange && isAreaArm)
		) {
			maxRangeArm = arm;
			maxRange = armMaxRange;
		}
	}
	return maxRangeArm;
}

function getNearestLeekEnemy() {
	var startCell = @(getCell());
	var enemies = @(arrayFilter(
		@(getAliveEnemies()),
		function(@enemy) {
			return !isSummon(@enemy);
		}
	));
	var nearestEnemy = shift(enemies);
	var nearestEnemyPathLength = @(getPathLength(@startCell, @(getCell(@nearestEnemy))));

	for (var enemy in enemies) {
		var enemyPathLength = @(getPathLength(@startCell, @(getCell(@enemy))));

		if (
			enemyPathLength !== null &&
			enemyPathLength < nearestEnemyPathLength
		) {
			nearestEnemy = @enemy;
			nearestEnemyPathLength = @enemyPathLength;
		}
	}
	return @nearestEnemy;
}

function getNearestDangerousSummonEnemy() {
	var startCell = @(getCell());
	var enemies = @(arrayFilter(
		@(getDangerousEnemies()),
		function(@enemy) {
			return isSummon(@enemy);
		}
	));
	var nearestEnemy = null;
	var nearestEnemyPathLength = 999;

	for (var enemy in enemies) {
		var enemyPathLength = @(getPathLength(@startCell, @(getCell(@enemy))));

		if (
			enemyPathLength !== null &&
			enemyPathLength < nearestEnemyPathLength
		) {
			nearestEnemy = @enemy;
			nearestEnemyPathLength = @enemyPathLength;
		}
	}
	return @nearestEnemy;
}

// /!\ Takes mp into account
function getReachableCellCoupleToAreaFireOnCell(@arm, @caster, @targetCell) {
	var casterCell = @(getCell(@caster));
	var casterMP = @(getMP(@caster));
	var cellCoupleToFire = null;
	var cacheKey = 'tmp-areaFireCell-' + arm + '-' + targetCell + '-' + casterCell;

	if (!hasInStore(cacheKey)) {
		var cellCouplesToFire = @(getCellCouplesToAreaFireOnCell(
			@arm, @caster, @targetCell
		));

		for (var couple in @cellCouplesToFire) {
			if (isReachableWith(@(couple[0]), @casterCell, @casterMP)) {
				putInStore(@cacheKey, @couple);
				break;
			}
		}
	}

	return @(getInStore(@cacheKey));
}

function getTargetableDeltaCells(@targetCell, @arm) {
	var targetableCells = @[];
	var x = @(getCellX(@targetCell));
	var y = @(getCellY(@targetCell));
	var isChip = isChip(@arm);

	var area = isChip ?
		@(getChipArea(@arm)) :
		@(getWeaponArea(@arm));

	var range = area === AREA_CIRCLE_1 ? 1 : (
		area === AREA_CIRCLE_2 ? 2 : (
			area === AREA_CIRCLE_3 ? 3 : 0
		)
	);

	if (range === 0) {
		logError(
			'getTargetableDeltaCells',
			'invalid arm area: ' + @(getArmName(@arm)) +
			' ' + @area
		);
		return @[];
	}

	for (var i = (x - range); i <= (x + range); i++) {
		for (var j = (y - range); j <= (y + range); j++) {
			var cell = @(getCellFromXY(@i, @j));

			if (
				cell !== null &&
				!isObstacle(@cell) &&
				inArray(
					@(getAreaImpactedCells(@cell, @area)), @targetCell
				)
			) {
				push(targetableCells, @cell);
			}
		}
	}

	return arraySort(@targetableCells, function(a, b) {
		var distA = getDistance(@a, @targetCell);
		var distB = getDistance(@b, @targetCell);
		return distA < distB ? -1 : (distA === distB ? 0 : 1);
	});
}

function isAreaArm(@arm) {
	var area = isChip(@arm) ?
		@(getChipArea(@arm)) :
		@(getWeaponArea(@arm));

	return area === AREA_CIRCLE_1 ||
		area === AREA_CIRCLE_2 ||
		area === AREA_CIRCLE_3;
}

function isBadlyPoisoned() {
	var poisonDammages = 0;

	for (var effect in getEffects()) {
		if (effect[0] === EFFECT_POISON) {
			poisonDammages += effect[1];
		}
	}
	return poisonDammages >= 300;
}

function isPoisoned(@leek) {
	for (var effect in @(getEffects(leek))) {
		if (effect[0] === EFFECT_POISON) {
			return true;
		}
	}
	return false;
}

function isPoisoner(@leek) {
	var cacheKey = 'psnr-' + leek;

	if (hasInStore(@cacheKey)) {
		return @(getInStore(@cacheKey));
	}

	var isLeekPoisoner = getMagic(@leek) > getStrength(@leek);
	putInStore(@cacheKey, @isLeekPoisoner);
	return @isLeekPoisoner;
}

function summonBulb(@bulb, @ai, @enemy) {
	var enemyCell = getCell(enemy);
	var summonerCell = getCell();
	var x = getCellX(summonerCell);
	var y = getCellY(summonerCell);
	var deltas;

	if (bulb === CHIP_HEALER_BULB || bulb === CHIP_ICED_BULB) {
		deltas = @[
			[0, -2],
			[0, 2],
			[-2, 0],
			[2, 0],
		];
	} else if (
		bulb === CHIP_FIRE_BULB ||
		bulb === CHIP_PUNY_BULB ||
		bulb === CHIP_ROCKY_BULB
	) {
		deltas = @[
			[0, -3],
			[0, -2],
			[0, 2],
			[0, 3],
			[-3, 0],
			[-2, 0],
			[2, 0],
			[3, 0],
			[-2, -1],
			[-2, 1],
			[-1, -2],
			[-1, 2],
			[1, -2],
			[1, 2],
			[2, -1],
			[2, 1],
		];
	}

	var deltaCells = @(arrayMap(@deltas, function(@delta) {
		return getCellFromXY(x + delta[0], y + delta[1]);
	}));

	var possibleCells = @(arrayFilter(@deltaCells, function(@cell) {
		return cell !== null && canUseChipOnCell(bulb, cell);
	}));

	if (safeCount(@possibleCells) > 0) {
		var targetCell = bulb === CHIP_HEALER_BULB ?
			getFarthestCellFrom(@possibleCells, enemyCell) :
			getClosestCellTo(@possibleCells, enemyCell);

		showResult(summon(bulb, targetCell, ai));
	} else {
		logWarning('summonBulb', 'no cell available for bulb');
	}
}
