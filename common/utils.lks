include('logger');
include('store');

function ensureArray(@object) {
	if (typeOf(object) !== TYPE_ARRAY) {
		logWarning('ensureArray', object + ' received');
		return @[];
	}
	return @object;
}

function logMonitorData() {
	logInfo('Monitoring:');
	increaseLogIndent();

	for (var key: var data in getAllInStore('monitor-')) {
		var turn = getTurn();
		var calls = data['calls'];
		var callsPerTurn = ceil(calls / turn * 10) / 10;
		var ops = data['ops'];
		var opsPerCall = ceil(ops / calls);
		var opsPerCallRel = ceil(opsPerCall / OPERATIONS_LIMIT * 1000) / 10;
		var opsPerTurn = ceil(ops / turn / OPERATIONS_LIMIT * 1000) / 10;

		logInfo(key);
		logDetail('calls: ' + calls);
		logDetail('calls/turn: ' + callsPerTurn);
		logDetail('ops: ' + ops);
		logDetail('ops/call: ' + opsPerCall + ' (' + opsPerCallRel + '%)');
		logDetail('ops/turn: ' + opsPerTurn + '%');
	}
	decreaseLogIndent();
}

function getMonitorLogMethod(@consumedOperations) {
	if (consumedOperations >= 20) {
		return @logDetailE;
	}
	if (consumedOperations >= 10) {
		return @logDetailW;
	}
	return @logDetail;
}

function monitorOperations(@id, @logResult) {
	var cacheKey = 'monitor-' + @id;
	var startOperations;

	if (!hasInStore(@cacheKey)) {
		putInStore(@cacheKey, @['calls': 0, 'ops': 0]);
	}

	var func = @(function() {
		var endOperations = @(getOperations());
		var consumedOperations = @endOperations - @startOperations;
		var consumedOperationsPerc = ceil(@consumedOperations / OPERATIONS_LIMIT * 10000) / 100;
		var monitorData = @(getInStore(@cacheKey));

		monitorData['calls'] += 1;
		monitorData['ops'] += @consumedOperations;
		putInStore(@cacheKey, @monitorData);

		if (logResult) {
			var remainingOperations = floor((OPERATIONS_LIMIT - endOperations) / OPERATIONS_LIMIT * 10000) / 100;
			getMonitorLogMethod(@consumedOperationsPerc)(@consumedOperationsPerc + '% ops consumed');
			logDetail(@remainingOperations + '% ops remaining');
		}
	});

	startOperations = @(getOperations());
	return @func;
}

function monitorIntermediateOperations(@label) {
	logDetail(@label);
	var startOperations;

	var func = @(function() {
		var consumedOperations = ceil((getOperations() - startOperations) / OPERATIONS_LIMIT * 10000) / 100;
		increaseLogIndent();
		getMonitorLogMethod(@consumedOperations)(@consumedOperations + '% ops consumed');
		decreaseLogIndent();
	});

	startOperations = @(getOperations());
	return @func;
}

function Once() {
	var flagArray = @[];

	return @(function() {
		logInfo('reset once');
		var currentIndex = -1;

		return @(function(willBeUsed) {
			currentIndex++;

			if (safeCount(flagArray) < (currentIndex + 1)) {
				flagArray[currentIndex] = true;
			}

			if (willBeUsed) {
				var result = flagArray[currentIndex];

				if (result) {
					flagArray[currentIndex] = false;
				} else {
					logInfo('already did once');
				}
				return result;
			}
			return false;
		});
	});
}

function Optimizer() {
	var hasShownReachLog = false;
	var startIndex = 0;
	var currentIndex;
	var limit = (OPERATIONS_LIMIT * (isSummon() ? 90 : 70) / 100);

	return @(function() {
		logInfo('reset optimizer');
		currentIndex = -1;

		return @(function() {
			currentIndex++;

			if (getOperations() >= limit) {
				if (!hasShownReachLog) {
					logError('Optimizer', 'operations limit reached');
					hasShownReachLog = true;
				}
				return false;
			}
			if (currentIndex >= startIndex) {
				startIndex = currentIndex;
				return true;
			}
			return false;
		});
	});
}

function perfLimiter(@percent) {
	var limit = (OPERATIONS_LIMIT * (isSummon() ? 90 : 70) / 100);
	var startOperations = @(getOperations());

	return @(function() {
		var operations = @(getOperations());
		var consumedOperations = (@operations - @startOperations) / OPERATIONS_LIMIT * 100;
		return consumedOperations < percent && operations < limit;
	});
}

function safeCount(@array) {
	return @(count(@(ensureArray(@array))));
}

function showResult(result) {
	var humanReadableResult = 'UNKNOWN';

	if (result == USE_CRITICAL) {
		logDetail('result: CRITICAL');
	} else if (result === USE_SUCCESS) {
		logDetail('result: SUCCESS');
	} else if (result === USE_FAILED) {
		logDetail('result: FAILED');
	} else if (result === USE_INVALID_TARGET) {
		logError('showResult', 'INVALID_TARGET');
	} else if (result === USE_NOT_ENOUGH_TP) {
		logError('showResult', 'NOT_ENOUGH_TP');
	} else if (result === USE_INVALID_POSITION) {
		logError('showResult', 'INVALID_POSITION');
	} else if (result === USE_INVALID_COOLDOWN) {
		logError('showResult', 'INVALID_COOLDOWN');
	}
}
