include('fight');
include('logger');
include('map');
include('store');
include('utils');

// TODO prioritize ref arms by dammages
// Move anyway if I can kill him
// TODO take into accout distance from healer bulb in cell safety computing
// TODO priorize most efficient cells when area fire

global LOG_MONITOR_DATA = false;
global MARK_SAFE_CELLS_TO_MOVE_ON = false;
global MARK_SAFETY_MAP = true;
global MAX_OPS_PERCENT = 80;
global MIN_DIRECT_CELLS_AROUND = 2;
global SAFE_LEVEL = 90;
global SAFE_LEVEL_AFTER_INACTIVITY = 70;
global SAFE_LEVEL_POISON = 80;

global turnsWithoutFire = 0;

function canFire(@arm, @target) {
	var doLog = !isSummon();
	var debugOperations;

	if (doLog) {
		logInfo('canFire(' + getArmName(@arm) + ')');
		increaseLogIndent();
		debugOperations = monitorOperations('canFire', true);
	}

	var isArmChip = @(isChip(@arm));
	var cost = isArmChip ?
		@(getChipCost(@arm)) :
		@(getWeaponCost(@arm));

	if (!isArmChip && getWeapon() !== @arm) {
		cost = cost + 1;
	}

	var can = getTP() >= cost;

	if (can && isArmChip) {
		can = getCooldown(@arm) === 0;
	}

	if (
		can &&
		target !== getLeek() &&
		getCellToFire(@arm, @target) === null
	) {
		var me = @(getLeek());
		var targetCell = @(getCell(@target));
		var cellToDirectFire = @(getCellToDirectFireOnCell(@arm, @me, @targetCell));

		if (canFireFromCell(@arm, @target, @cellToDirectFire, @targetCell)) {
			setCellToFire(@arm, @target, @cellToDirectFire);
		} else if (isAreaArm(@arm)) {
			var couple = getReachableCellCoupleToAreaFireOnCell(@arm, @me, @targetCell);
			var cellToAreaFire = couple !== null ?
				@(couple[0]) :
				null;
			var cellToAreaFireOn = couple !== null ?
				@(couple[1]) :
				null;

			if (canFireFromCell(@arm, @target, @cellToAreaFire, @cellToAreaFireOn)) {
				setCellToFire(@arm, @target, @cellToAreaFire);
				setCellToFireOn(@arm, @target, @(couple[1]));
			} else {
				can = false;
			}
		} else {
			can = false;
		}
	}

	if (doLog) {
		decreaseLogIndent();
		logDetail(can);
		debugOperations();
	}
	return @can;
}

function canFireFromCell(@arm, @target, @cellToFire, @cellToFireOn) {
	if (cellToFire === null) {
		return false;
	}

	var pathlength = @(getPathLength(@(getCell()), @cellToFire));
	var can = pathlength !== null && getMP() >= pathlength;

	if (can && !isSummon()) {
		can = shouldFire(@target, @arm, @cellToFire, @cellToFireOn, @pathlength) === true;
	}
	return @can;
}

function computeSafetyMap(@enemy) {
	logInfo('computeSafetyMap(' + getLeekName(@enemy) + ')');

	var debugOperations = @(monitorOperations('computeSafetyMap', true));
	var groups = @[];
	var totalEnemyMP = getTotalMP(enemy);
	var enemyCell = @(getCell(@enemy));
	var reachableCells = @(sortByDistanceDesc(
		@(getReachableCells(@(getCell()), @(getMP()))),
		@enemyCell
	));
	var map = @([]);

	var significantEnemyMP = getTotalMP(@enemy) * 1 / 3;
	var shouldContinue = perfLimiter(MAX_OPS_PERCENT);
	var hasStopped = false;
	var i = 0;

	for (var cell in @reachableCells) {
		if (!hasStopped && !shouldContinue()) {
			logWarning(
				'computeSafetyMap',
				'stops after ' + i + '/' + safeCount(@reachableCells)
			);
			hasStopped = true;
		}

		var level = hasStopped ? 0 : @(getCellSafetyLevel(@cell));
		map[@cell] = @level;

		if (MARK_SAFETY_MAP) {
			if (groups[@level] === null) {
				groups[@level] = @[@cell];
			} else {
				push(groups[@level], @cell);
			}
		}
		i++;
	}
	debugOperations();

	if (MARK_SAFETY_MAP) {
		arrayIter(@groups, function(@level, @group) {
			var rgb = hslToRgb(level * 1.2 / 360, 1, 0.5);
			var color = getColor(@(rgb[0]), @(rgb[1]), @(rgb[2]));
			mark(@group, @color);
		});
	}

	putInStore('tmp-safetyMap', @map);
}

function fire(@arm, @target) {
	logInfo('fire(' + getArmName(@arm) + ', ' + getLeekName(@target) + ')');

	var hasFired = false;
	var hasError = false;
	var result = null;
	var fireCell = getCell();

	if (isWeapon(@arm)) {
		// Has to be done before calling getTargetEnemy
		fireCell = @(getCellToFire(@arm, @target));
		moveTowardCell(@fireCell);
		increaseLogIndent();
		var newTarget = @(getTargetEnemy(@arm, @target));
		decreaseLogIndent();

		if (newTarget !== null) {
			ensureWearingWeapon(@arm);
			result = @(useWeapon(@newTarget));
			hasFired = true;
		} else if (isAreaArm(@arm)) {
			var targetCell = getCellToFireOn(@arm, @target);

			if (targetCell !== null) {
				logDetail('fire on delta cell: ' + targetCell);
				ensureWearingWeapon(@arm);
				result = @(useWeaponOnCell(@targetCell));
				hasFired = true;
			} else {
				logError('fire', 'Cannot use weapon ' + getWeaponName(@arm) + ' on cell ' + targetCell);
			}
		} else {
			logWarning('fire', 'unable to find a target enemy');
		}
	} else {
		if (target !== getLeek()) {
			fireCell = @(getCellToFire(@arm, @target));
			moveTowardCell(@fireCell);

			if (!isAlly(target)) {
				hasFired = true;
			}
		}

		if (canUseChip(arm, target)) {
			result = useChip(arm, target);
		} else if (isAreaArm(arm)) {
			var targetCell = getCellToFireOn(@arm, @target);

			if (targetCell !== null) {
				logDetail('fire on delta cell: ' + targetCell);
				result = @(useChipOnCell(@arm, @targetCell));
				hasFired = true;
			} else {
				logError('fire', 'Cannot use chip ' + getChipName(arm) + ' on cell ' + targetCell);
			}
		} else {
			logError('fire', 'Cannot use chip ' + getChipName(arm) + ' on target ' + getLeekName(@target));
		}
	}

	showResult(result);

	if (
		result !== USE_SUCCESS &&
		result !== USE_FAILED &&
		result !== USE_CRITICAL
	) {
		hasError = true;
	}

	return @[hasFired, hasError];
}

function getCellSafetyLevel(@cell) {
	if (cell === null) {
		logError('getCellSafetyLevel', 'called with null cell');
		return 0;
	}

	var cacheKey = 'tmp-sfy-' + @cell;

	if (hasInStore(@cacheKey)) {
		return @(getInStore(@cacheKey));
	}

	var debugOperations = @(monitorOperations('getCellSafetyLevel', false));
	var nearestLeekEnemy = getNearestLeekEnemy();
	var potentialDammages = @(getEnemyPotentialDammagesOnCell(@cell, @nearestLeekEnemy));
	var life = getLife();
	var level = max(life - potentialDammages, 0) / life * 100;

	putInStore(@cacheKey, @level);
	debugOperations();
	return @level;
}

function getCellToFire(@arm, @target) {
	return @(getInStore('tmp-fire-cell-' + arm + '-' + target));
}

function getCellToFireOn(@arm, @target) {
	return @(getInStore('tmp-fire-on-cell-' + arm + '-' + target));
}

function getNextCell(@enemy, @startCell, @availableMP, @shouldMark) {
	var nextCell = @startCell;
	var enemyCell = @(getCell(@enemy));
	var cacheKey = 'tmp-nxtCl-' + @enemy + '-' +
		@startCell + '-' + @availableMP;

	logInfo('getNextCell()');
	logDetail('enemy: ' + @(getLeekName(@enemy)));
	logDetail('startCell: ' + @startCell);
	logDetail('availableMP: ' + @availableMP);

	if (hasInStore(@cacheKey)) {
		logDetail('use cache');
		nextCell = @(getInStore(@cacheKey));

		if (
			MARK_SAFE_CELLS_TO_MOVE_ON &&
			shouldMark &&
			getCellSafetyLevel(@nextCell) >= SAFE_LEVEL
		) {
			mark(@[@nextCell], getColor(255, 128, 210));
		}
	} else if (availableMP > 0) {
		var debugOperations = @(monitorOperations('getNextCell', true));

		var reachableCells = @(getReachableCells(
			@startCell, @availableMP
		));
		logDetail(safeCount(reachableCells) + ' reachable cells found');

		var safetyMap = @(getSafetyMap());
		var maxSafetyLevel = 0;
		var maxSafetyCells = @[];
		var i = 0;

		for (var cell in @reachableCells) {
			var safetyLevel = @(safetyMap[@cell]);

			if (safetyLevel > maxSafetyLevel) {
				maxSafetyLevel = safetyLevel;
				maxSafetyCells = @[@cell];
			} else if (safetyLevel === maxSafetyLevel) {
				push(maxSafetyCells, @cell);
			}
		}

		logDetail(@safeCount(@maxSafetyCells) + ' cells found with safety ' + @maxSafetyLevel);

		nextCell = @(getClosestCellTo(
			@maxSafetyCells, @enemyCell
		));

		if (nextCell === null) {
			logError(
				'getNextCell',
				'nextCell null (safe), maxSafetyCells: ' +
				@maxSafetyCells + ', enemyCell: ' + @enemyCell
			);
			nextCell = @startCell;
		}

		if (MARK_SAFE_CELLS_TO_MOVE_ON && shouldMark) {
			mark(@maxSafetyCells, getColor(255, 128, 210));
		}

		var summoner = getSummoner();

		if (isSummon()) {
			var summonerCell = @(getCell(@(getSummoner())));

			if (summonerCell !== null) {
				var distance = @(getDistance(@summonerCell, @startCell));
				var nextDistance = @(getDistance(@summonerCell, @nextCell));

				if (distance >= 2 && nextDistance <= 2) {
					logDetail('do not move not to block summoner');
					nextCell = @startCell;
				} else if (distance < 2 && safeCount(@reachableCells) > 0) {
					logDetail('move not to block summoner');
					nextCell = @(getFarthestCellFrom(
						@reachableCells, @summonerCell
					));

					if (nextCell === null) {
						logError(
							'getNextCell',
							'nextCell null (summon), reachableCells: ' +
							@reachableCells + ', summonerCell: ' + @summonerCell
						);
						nextCell = @startCell;
					}
				}
			} else {
				logWarning('getNextCell', 'summuner cell null');
			}
		}

		putInStore(@cacheKey, @nextCell);
		debugOperations();
	}

	logDetail('nextCell: ' + @nextCell);
	return @nextCell;
}

function getSafetyMap() {
	return @(getInStore('tmp-safetyMap'));
}

function getTargetEnemy(@weapon, @enemy) {
	var currentCell = getCell();
	var targetEnemy = null;

	if (canUseWeapon(weapon, enemy)) {
		targetEnemy = enemy;
	} else {
		// There may be another enemy between me and my target

		for (var aliveEnemy in @(getAliveEnemies())) {
			var aliveEnemyCell = getCell(aliveEnemy);
			var enemyCell = getCell(enemy);

			if (
				aliveEnemy !== enemy &&
				canUseWeapon(weapon, aliveEnemy) &&
				isOnSameLine(currentCell, aliveEnemyCell) &&
				isOnSameLine(currentCell, enemyCell) &&
				isOnSameLine(enemyCell, aliveEnemyCell) &&
				getDistance(enemyCell, aliveEnemyCell) < getDistance(enemyCell, currentCell)
			) {
				targetEnemy = aliveEnemy;
				break;
			}
		}
	}

	logInfo(
		'getTargetEnemy(): ' + getLeekName(targetEnemy) +
		(targetEnemy !== null ? (' on cell ' + getCell(targetEnemy)) : '')
	);

	return targetEnemy;
}

function initTurn() {
	clearStore();

	if (!isSummon()) {
		computeSafetyMap(@(getNearestLeekEnemy()));
	}

	if (LOG_MONITOR_DATA) {
		logMonitorData();
	}
}

function move(@enemy) {
	logInfo('move(' + getLeekName(enemy) + ')');
	increaseLogIndent();

	if (getMP() === 0) {
		return;
	}

	var debugOperations = monitorOperations('move', true);
	var nextCell = getNextCell(enemy, getCell(), getMP(), true);

	if (nextCell === null) {
		logError('move', 'unable to find the next cell, do not move');
		decreaseLogIndent();
		return;
	}

	decreaseLogIndent();
	logDetail(
		'to ' + nextCell + ' (safety: ' +
		getCellSafetyLevel(nextCell) + ')'
	);

	if (nextCell !== getCell()) {
		moveTowardCell(nextCell);
	}
	debugOperations();
}

function setCellToFire(@arm, @target, @cellToFire) {
	putInStore('tmp-fire-cell-' + arm + '-' + target, @cellToFire);
}

function setCellToFireOn(@arm, @target, @cellToFireOn) {
	putInStore('tmp-fire-on-cell-' + arm + '-' + target, @cellToFireOn);
}

function shouldFire(@target, @arm, @cellToFire, @cellToFireOn, @pathlength) {
	logInfo('shouldFire()');

	var debugOperations = monitorOperations('shouldFire', true);
	var should = false;
	var willBadlyImpactAlly = false;

	if (!isAlly(target) && isAreaArm(@arm) && cellToFireOn !== null) {
		var impactedLeeks = isChip(@arm) ?
			@(getChipTargets(@arm, @cellToFireOn)) :
			@(getWeaponTargets(@arm, @cellToFireOn));

		// getAliveAllies returns also me
		for (var ally in getAliveAllies()) {
			if (inArray(impactedLeeks, ally)) {
				logDetail('will badly impact ' + getLeekName(ally));
				willBadlyImpactAlly = true;
				break;
			}
		}
	}

	if (!willBadlyImpactAlly) {
		if (pathlength === 0) {
			should = true;
			logDetail('can fire without moving');
		} else if (
			!isSummon(target) &&
			getLife() > (getTotalLife() * 2 / 3) &&
			getLife(target) < (getTotalLife(target) * 1 / 3)
		) {
			should = true;
			logDetail('finish him');
		} else {
			increaseLogIndent();

			// We do not want to take summons into account
			var initialEnemy = getNearestLeekEnemy();
			var safetyLevel = 'unknown';
			var nextCellAfterFire = getNextCell(
				initialEnemy, cellToFire, getMP() - pathlength, false
			);
			var safetyLevelAfter = 'unknown';
			var pathLengthAfter = 'unknown';
			var isSafe = false;
			var isSafeForPoison = false;
			var isSafeAfterInactivity = false;
			var isNotWorst = false;

			if (nextCellAfterFire !== null) {
				safetyLevelAfter = getCellSafetyLevel(nextCellAfterFire);
				isSafe = safetyLevelAfter >= SAFE_LEVEL;
				isSafeForPoison = target === initialEnemy &&
					(arm === CHIP_TOXIN || arm === CHIP_VENOM) &&
					!isPoisoned(initialEnemy) &&
					safetyLevelAfter >= SAFE_LEVEL_POISON;
				isSafeAfterInactivity = turnsWithoutFire >= 2 &&
					safetyLevelAfter >= SAFE_LEVEL_AFTER_INACTIVITY;

				if (!isSafe && !isSafeForPoison && !isSafeAfterInactivity) {
					var nextCell = getNextCell(
						initialEnemy, getCell(), getMP(), false
					);

					if (nextCell !== null) {
						isNotWorst = safetyLevelAfter >= getCellSafetyLevel(nextCell);
					} else {
						logError('shouldFire', 'nextCell null');
					}
				}
			} else {
				logError('shouldFire', 'nextCellAfterFire null');
			}

			decreaseLogIndent();
			logDetail(
				(isSafe ? '' : 'not ') + 'safe (' + safetyLevelAfter + '), ' +
				(isSafeForPoison ? '' : 'not ') + 'safe for poison, ' +
				(isSafeAfterInactivity ? '' : 'not ') + 'safe after inactivity, ' +
				(isNotWorst ? 'not ' : '') + 'worst'
			);

			should = isSafe || isSafeForPoison || isSafeAfterInactivity || isNotWorst;
		}
	}

	debugOperations();
	return should;
}

function updateTurnsWithoutFire(@hasFired) {
	turnsWithoutFire = hasFired ? 0 : turnsWithoutFire + 1;
}
