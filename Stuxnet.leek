global me = getLeek();
global currentWeapon = null;
global totalLife = getTotalLife();
global hasFired;
global enemy = getNearestLeekEnemy();

function areCellsColinear(a, b, c) {
	var xa = getCellX(a);
	var ya = getCellY(a);
	var xb = getCellX(b);
	var yb = getCellY(b);
	var xc = getCellX(c);
	var yc = getCellY(c);

	// see http://mathworld.wolfram.com/Collinear.html
	return xa * (yb - yc) + xb * (yc - ya) + xc * (ya - yb) === 0;
}

function canFireWithChip(chip, target) {
	var canFire = getTP() >= getChipCost(chip) && getCooldown(chip) === 0;

	if (target === enemy) {
		canFire = canFire && getMP() >= getPathLength(getCell(), getCellToFireWithChip(chip, enemy));
	}

	debug('canFireWithChip(' + getChipName(chip) + ') => ' + canFire);
	return canFire;
}

function canFireWithWeapon(weapon) {
	var cost = getWeaponCost(weapon);

	if (currentWeapon !== weapon) {
		cost = cost + 1;
	}

	var canFire = getTP() >= cost && getMP() >= getPathLength(getCell(), getCellToFireWithWeapon(weapon));

	debug('canFireWithWeapon(' + getWeaponName(weapon) + ') => ' + canFire);
	return canFire;
}

function ensureWearingWeapon(weapon) {
	if (currentWeapon !== weapon) {
		setWeapon(weapon); 
		currentWeapon = weapon;
	}
}

function getCellsAround(centerCell) {
	var x = getCellX(centerCell);
	var y = getCellY(centerCell);
	var deltas = [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]];

	return arrayFilter(arrayMap(deltas, function (delta) {
		return getCellFromXY(x + delta[0], y + delta[1]);
	}), function (cell) {
		return cell !== null;	
	});
}

function getCellsAroundObstacles() {
	var obstacles = getObstacles();
	var enemyCell = getCell(enemy);
	var cellsAroundObstacles = [];

	arrayIter(obstacles, function (obstacle) {
		var reachableCellsAroundObstacle = removeUnreachableCells(getCellsAround(obstacle));
		var usefulCellsAroundObstacle = arrayFilter(reachableCellsAroundObstacle, function (cellAround) {
			return areCellsColinear(obstacle, enemyCell, cellAround) && getDistance(cellAround, enemyCell) > getDistance(obstacle, enemyCell);
		});
		cellsAroundObstacles = arrayConcat(cellsAroundObstacles, usefulCellsAroundObstacle);
	});

	debug(cellsAroundObstacles);
	return cellsAroundObstacles;
}

function getCellToFireWithChip(chip, target) {
	var currentCell = getCell();
	var cells = arrayFilter(getCellsToUseChip(chip, target), function (cell) {
		return getPathLength(currentCell, cell) > 0;
	});
	var startCell = getCell();
	var cellToFire = getClosestCell(cells);

	debug('getCellToFireWithChip(' + getChipName(chip) + ', ' + getName(target) + ')');
	debug('startCell: ' + startCell);
	debug('cells: ' + cells);
	debug('cellToFire: ' + cellToFire);
	debug('pathLength: ' + getPathLength(startCell, cellToFire));

	return cellToFire;
}

function getCellToFireWithWeapon(weapon) {
	var currentCell = getCell();
	var cells = arrayFilter(getCellsToUseWeapon(weapon, enemy), function (cell) {
		return getPathLength(currentCell, cell) > 0;
	});
	var startCell = getCell();
	var cellToFire = getClosestCell(cells);

	debug('getCellToFireWithWeapon(' + getWeaponName(weapon) + ')');
	debug('startCell: ' + startCell);
	debug('cells: ' + cells);
	debug('cellToFire: ' + cellToFire);
	debug('pathLength: ' + getPathLength(startCell, cellToFire));

	return cellToFire;
}

function getClosestCell(cells) {
	var startCell = getCell();

	return arrayFoldLeft(cells, function (closestCell, cell) {
		var cellPathLength = getPathLength(startCell, cell);
		var closestCellPathLength = getPathLength(startCell, closestCell);

		return cell === startCell || (cellPathLength > 0 && cellPathLength < closestCellPathLength) ? cell : closestCell;
	}, shift(cells));
}

function getNearestLeekEnemy() {
	var enemies = getAliveEnemies();
	var startCell = getCell();

	enemies = arrayFilter(enemies, function (e) {
		return !isSummon(e);
	});

	return arrayFoldLeft(enemies, function (nearestEnemy, e) {
		var enemyPathLength = getPathLength(startCell, getCell(e));
		var nearestEnemyPathLength = getPathLength(startCell, getCell(nearestEnemy));

		return enemyPathLength > 0 && enemyPathLength < nearestEnemyPathLength ? e : nearestEnemy;
	}, shift(enemies));
}

function moveTo(cell) {
	debug('move: ' + moveTowardCell(cell));
}

function removeUnreachableCells(cells) {
	var currentCell = getCell();
	var mp = getMP();

	return arrayFilter(cells, function (cell) {
		var pathLength = getPathLength(currentCell, cell);
		return pathLength > 0 && pathLength <= mp;
	});
}

function runAway() {
	var cell = getCell();
	var enemyCell = getCell(enemy);
	var cellsAroundObstacles = getCellsAroundObstacles();

	if (getMP() > 0) {
		if (count(cellsAroundObstacles) > 0) {
			debug('move to obstacle');
			moveTo(getClosestCell(cellsAroundObstacles));
		} else {
			debug('move away from line');
			debug('move: ' + moveAwayFromLine(cell, enemyCell));
		}
	}
}

function showResult(result) {
	var humanReadableResult = 'UNKNOWN';

	if (result == USE_CRITICAL) {
		humanReadableResult = 'CRITICAL';
	} else if (result === USE_SUCCESS) {
		humanReadableResult = 'SUCCESS';
	} else if (result === USE_FAILED) {
		humanReadableResult = 'FAILED';
	} else if (result === USE_INVALID_TARGET) {
		humanReadableResult = 'INVALID_TARGET';
	} else if (result === USE_NOT_ENOUGH_TP) {
		humanReadableResult = 'NOT_ENOUGH_TP';
	} else if (result === USE_INVALID_POSITION) {
		humanReadableResult = 'INVALID_POSITION,';
	} else if (result === USE_INVALID_COOLDOWN) {
		humanReadableResult = 'INVALID_COOLDOWN,';
	}

	debug('result: ' + humanReadableResult);
}

hasFired = false;
enemy = getNearestLeekEnemy();

if (currentWeapon === null) {
	ensureWearingWeapon(WEAPON_SHOTGUN);
	say('Canarticho !');
}

while (isAlive(enemy)) {
	var chip = null;
	var life = getLife();
	var mp = getMP();
	var tp = getTP();
	var result;
	var target = null;
	var weapon = null;

	debug('life: ' + life);
	debug('MP: ' + mp);
	debug('TP: ' + tp);

	if (canFireWithWeapon(WEAPON_SHOTGUN)) {
		weapon = WEAPON_SHOTGUN;
	} else if (canFireWithChip(CHIP_ROCK, enemy)) {
		chip = CHIP_ROCK;
		target = enemy;
	}  else if (canFireWithWeapon(WEAPON_DOUBLE_GUN)) {
		weapon = WEAPON_DOUBLE_GUN;
	} else if (canFireWithChip(CHIP_HELMET, me)) {
		chip = CHIP_HELMET;
		target = me;
	} else if (canFireWithChip(CHIP_ICE, enemy)) {
		chip = CHIP_ICE;
		target = enemy;
	} else if (canFireWithChip(CHIP_SPARK, enemy)) {
		chip = CHIP_SPARK;
		target = enemy;
	} else if (life < totalLife and canFireWithChip(CHIP_BANDAGE, me)) {	
		chip = CHIP_BANDAGE;	
		target = me;	
	} else {
		if (hasFired) {
			if (mp > 0 && tp > 0) {
				say('Sauve qui peut !');
			}
			runAway();
		} else {
			var targetCell = getCellToFireWithWeapon(WEAPON_SHOTGUN);
			var enemyCell = getCell(enemy);
			
			if (getMP() > 0) {
				// Avoid beeing blocked
				moveTowardCell(targetCell, 1);
			}

 			while (getMP() > 0 && getPathLength(getCell(), enemyCell) > 15) {
				moveTowardCell(targetCell, 1);
			}			
		}
		break;
	}

	if (weapon !== null) {
		debug('use ' + getWeaponName(weapon));
		moveTo(getCellToFireWithWeapon(weapon));
		ensureWearingWeapon(weapon);
		result = useWeapon(enemy);
		hasFired = true;
	} else if (chip !== null) {
		debug('use ' + getChipName(chip));

		if (target === enemy) {
			moveTo(getCellToFireWithChip(chip, enemy));
			hasFired = true;
		}

		result = useChip(chip, target);
	}

	if (result !== null) {
		showResult(result);

		if (result === USE_INVALID_POSITION && getMP() > 0) {
			// Why the fuck this can happen ???
			if (moveToward(enemy) === 0) {
				break;
			}
		} else if (result !== USE_SUCCESS && result !== USE_FAILED && result !== USE_CRITICAL) {
			break;
		}
	}

	if (getAliveEnemiesCount() === 0) {
		say("Encore une victoire de canard !");
	}
}
